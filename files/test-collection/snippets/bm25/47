Snippets for the query:  Q47
************************
Total Hits:  281
************************

************************
Document:  CACM-2135.html
************************


rapid computation of general interpolation
formulas and mechanical quadrature rules

let f have n continuous on a closed interval
[a,b] and let l be a linear functional.  the attempt 
is made to approximate l (f) with l (q) where q is a polynomial,
approximating f.  algorithms are developed 
for 
************************
s are developed 
for rapid computation of l (q) for a wide class of
selections of q which includes the lagrangian and 
hermitian rules as special cases.

cacm december, 1971

gustafson, s.

linear functionals, divided 
************************

************************
Document:  CACM-1886.html
************************


generation of optimal code for expressions via factorization

given a set of expressions which are to be
compiled, methods are presented for increasing the 
efficiency of the object code produced by first factoring
the expressions, i.e. finding a set of subexpressions 
each of which occurs in two or more other expressions
or subexpressions.  once all the factors have been 
ascertained, a sequencing procedure is applied which
orders the factors and expressions such that all 
information is computed in the correct sequence and factors
need be retained in memory a minimal amount 
of time.  an assignment algorithm is then executed in
order to minimize the total number of temporary 
storage cells required to hold the results of evaluating
the factors.  in order to make these techniques 
computationally feasible, heuristic procedures are
applied, and hence global optimal results are not 
necessarily generated.  the factorization algorithms
are also applicable to the problem of factoring 
boolean switching expressions and of factoring polynomials
encountered in symbol manipulating systems.

cacm june, 1969

breuer, m. a.

factorization algorithms, code optimization, sequencing
of operations, 
************************

************************
Document:  CACM-3032.html
************************


reverse path forwarding of broadcast packets

a broadcast packet is for delivery to all
nodes of a network.  algorithms for accomplishing 
this delivery through a store-and-forward packet switching
 computer network include (1) transmission 
of separately addressed packets. (2) multidestination
addressing, (3) hot potato forwarding,(4) spanning 
tree forwarding, and (5) source based forwarding.  to
this list of algorithms we add (6) reverse path 
forwarding, a broadcast routing method which exploits
routing procedures and data structures already 
available for 
************************
 already 
available for packet switching.  reverse path forwarding
is a practical algorithm for broadcast routing 
 in store-and-forward packet switching computer networks.
 the algorithm 
************************
 networks.
 the algorithm is described as being practical 
 because it is not optimal according to metrics developed
for its analysis in this paper, and also because 
it can be implemented in existing networks with less complexity
than that required for the known alternatives. 

cacm december, 1978

dalal, y.
metcalfe, r.

reverse path forwarding, broadcast packets, routing,
computer networks, store-and-forward 
************************

************************
Document:  CACM-2344.html
************************


on the optimization of performance of time-sharing systems by simulation

a simulation model of a time-sharing system
with a finite noncontiguous store and an infinite 
auxiliary store is used to study the variation of system
parameters such as store size, number of jobs 
allowed to execute simultaneously, job-scheduling algorithm,
etc.  the effects of these variations on 
a measure of system performance is used to ascertain which
of the parameters controllable by the job-scheduling 
algorithm, including the scheduling itself, require optimization,
and which of the parameters not normally 
controllable by the scheduling algorithm have a marked
effect on system performance.  system performance 
is based upon the mean cost of delay to all jobs processed.
 it is shown that significant improvements 
in the measure of system performance can be obtained by
using variable time-slice techniques and by selecting 
the optimum round-robin cycle time.  it appears that these
features would benefit from optimization whereas 
other parameters controllable by the scheduling algorithm
affect system performance in a predictable 
manner and would not benefit from optimization.  features
not normally under the control of the scheduling 
algorithm can also have a marked effect on the measure
of performance; in particular, supervisor overheads, 
the size of the store, and the speed of the cpu.  a comparison
is made between the results of the simulation 
model and two analytical equations for quantum-oriented
nonpreemptive time-sharing systems.  the comparison 
is found to be very favorable.

cacm june, 1972

blatny, j.
clark, s. r.
rourke, t. a.

time-sharing, simulation studies, optimization,
measure of performance, scheduling algorithms

3.80 4.30 4.32

ca720601 
************************

************************
Document:  CACM-1692.html
************************


numerical solution of a thin plate heat transfer problem

the numerical solution of a system of linear
equations resulting 
************************

************************
Document:  CACM-3046.html
************************


computer generation of gamma random variables - ii

a rejection method is proposed for generating
gamma variates with nonintegral shape parameter 
a, a > 1. this method is similar to other methods given
by fishman, wallace, and tadikamalla and is faster 
than these methods for a> 2.  the core storage requirements
and the programming effort for the proposed 
************************
 effort for the proposed 
method are similar to those of wallace's or tadikamalla's
methods.  the computational times for the proposed 
method remain fairly constant for medium and large
values of a and are superior to times obtained by 
ahrens and dieter's method for all values of a.  the
proposed method is simpler than ahrens and dieter's 
method.

cacm november, 1978

tadikamalla, p.

gamma variables, rejection method, computer methods

5.5 8.1

ca781105 
************************

************************
Document:  CACM-2884.html
************************


permutation enumeration: four new permutation algorithms

classical permutation 
************************
s

classical permutation enumeration algorithms encounter
special cases 
************************
s encounter
special cases requiring additional computation 
every nth permutation when generating the n! permutations
on n marks.  four new algorithms have the attribute 
************************
s have the attribute 
that special cases occur every n(n-1)permutations. 
two of the algorithms produce the next permutation 
************************
s produce the next permutation 
with a single exchange of two marks.  the other two algorithms
infrequently exchange 
************************
s
infrequently exchange more than two marks, 
but the rules for generating the next permutation are
very simple.  performance tests which have counted 
execution of assignment statements, comparisons, arithmetic
operations, and subscripted array references 
have shown superiority of the new algorithms compared to
boothroyd's 
************************
s compared to
boothroyd's implementation of m. b. well's algorithm 
and ehrlich's implementation of the johnson-trotter algorithm.

cacm february, 1976

ives, f. m.

permutations, loop-free algorithms

5.30

ca760203 jb january 
************************

************************
Document:  CACM-3107.html
************************


generating beta variates with nonintegrel shape parameters

a new rejection method is described for generating
beta variates.  the method is compared with 
previously published methods both theoretically and through
computer timings.  it is suggested 
************************
 timings.  it is suggested that the 
method has advantages in both speed and programming
simplicity over previous methods, especially for 
"difficult" 
************************

************************
Document:  CACM-3163.html
************************


an optimal insertion algorithm for one-sided
height-balanced binary search trees

an algorithm for inserting an element into a one-sided height-balanced
(oshb) binary search tree is presented.  the algorithm operates in time 
o(log n), where n is the number of nodes in
the tree.  this represents an improvement over the best previous
ly known insertion algorithms of hirschberg and kosaraju, which require
time o(log 2n).  moreover, the o(log n) complexity is optimal. earlier 
************************
 is optimal. earlier 
results have shown that deletion in such a structure can
also be performed in o(log n) time.  thus the result of this paper
gives a negative answer to the question of whether such trees should
be the first examples of their kind, where deletion has a smaller time 
complexity than insertion.  furthermore, it can now be concluded
that insertion, deletion, and retrieval in oshb trees can
be performed in the same time as the corresponding operations for
the more general avl trees, to within a constant factor.  however,
the insertion and deletion algorithms for oshb trees appear 
************************
s for oshb trees appear much
more complicated than the corresponding algorithms for avl trees.

cacm 
************************

************************
Document:  CACM-2828.html
************************


hierarchical geometric models for visible surface algorithms

the geometric structure inherent in the definition
of the shapes of three-dimensional objects 
and environments is used not just to define their relative
motion and placement, but also to assist in 
solving many other problems of systems for producing
pictures by computer.  by using an extension of 
traditional structure information, or a geometric hierarchy,
five significant improvements to current 
techniques are possible.  first, the range of complexity
of an environment is greatly increased while 
the visible complexity of any given scene is kept within
a fixed upper limit.  second, a meaningful way 
is provided to vary the amount of detail presented in
a scene.  third, "clipping" becomes a very fast 
logarithmic search for the resolvable parts of the environment
within the field of view.  fourth, frame 
to frame coherence and clipping define a graphical
"working set," or fraction of the total structure 
that should be present in primary store for immediate
access by the visible surface algorithm.  finally, 
the geometric structure suggests a recursive descent,
visible surface algorithm in which the computation 
time potentially grows linearly with the visible complexity of the scene.

cacm october, 1976

clark, j. h.

visible surface algorithms, hidden surface algorithms,
hierarchical data structures, geometric 
models


************************

************************
Document:  CACM-0047.html
************************


russian visit to u. computers

cacm november, 1959

************************

************************
Document:  CACM-2273.html
************************


conversion of decision tables by rule mask method without rule mask

two algorithms for generating computer programs
from decision 
************************
 programs
from decision tables are described.  the algorithms 
allow handling limited 
************************
s 
allow handling limited entry, extended entry, and mixed
entry tables.  the algorithms are based on the 
rule 
************************
s are based on the 
rule mask method but need not have the masks at execution
time.  they perform the logical operations 
immediately rather than at the end of the interpreting
process.  execution time can be considerably reduced 
by instantly marking rules which are not applicable (algorithms
1 and 2) or conditions 
************************
s
1 and 2) or conditions which are already 
tested (algorithm 2).  the new algorithms combine to a
certain 
************************

************************
Document:  CACM-2490.html
************************


efficient algorithms for graph manipulation 
************************
s for graph manipulation [h] (algorithm a447)

efficient algorithms are presented for partitioning

************************
 are presented for partitioning
a graph into connected components, biconnected 
components and simple paths.  the algorithm for partitioning
of a graph into simple paths is iterative 
and each iteration produces a new path between two
vertices already on paths.  (the start vertex can 
be specified dynamically.)  if v is the number of vertices
and e is the number of edges, each algorithm 
requires time and space proportional to max (v,e)
when executed on a random access computer.

cacm june, 1973

hopcroft, 
************************
.

cacm june, 1973

hopcroft, j.
tarjan, r.

graphs,analysis of algorithms, graph manipulation

************************

************************
Document:  CACM-2997.html
************************


convex hulls of finite sets of poin ts in two and three dimensions

the convex hulls of sets of n poin ts in two
and three dimensions can be determined with o(n 
log n) operations.  the presented algorithms use the "divide
and 
************************
s use the "divide
and conquer" technique and recursively apply 
a merge procedure for two nonin tersecting convex hulls.
 since any convex hull algorithm requires at 
least o(n log n) operations, the time complexity of the
proposed algorithms is optimal within a 
************************
 is optimal within a multiplicative 
constant.

cacm february, 1977

preparata, f. p.
hong, s. j.

computational complexity, convex hull, optimal algorithms,
planar set of poin 
************************

************************
Document:  CACM-1171.html
************************


a comparison of the primal-simplex and primal-dual
algorithms for linear programming

a statistical comparison 
************************


a statistical comparison of the primal-dual
and the more commonly used primal-simplex algorithm 
for solving linear programming problems has been made 
************************
 problems has been made under
the assumption of starting with a full artificial 
basis.  under these conditions the primal-dual method
shows a statistically significant superiority on 
randomly generated problems.  it has also been found, via
a regression analysis, that the relevant parameters 
in determining the difference in the number of iterations
between the algorithms is not only the number 
************************

************************
Document:  CACM-2142.html
************************


reconstruction of pictures from their projections

there are situations in the natural sciences
and medicine (e.g. in electron microscopy and 
x-ray photography) in which it is desirable to estimate the
gray levels of a digital picture at the individual 
points from the sums of the gray levels along straight
lines (projections) at a few angles.  usually, 
in such situations, the picture is far from determined
and the problem is to find the "most representative" 
picture.  three algorithms are described (all using
monte carlo methods) which were designed to solve 
this problem.  the algorithms are applicable in a large
and varied number of fields.  the most important 
uses may be the reconstruction of possibly asymmetric particles
from electron micrographs and three-dimensional 
x-ray analysis.

cacm december, 1971

gordon,r.
herman, g. t.

approximation, biomedical image processing, efficient
encoding, image processing, linear programming, 
mathematical programming, 
************************
, 
mathematical programming, monte carlo techniques, optimization,
picture compression, 
************************

************************
Document:  CACM-1504.html
************************


algorithms for finding a fundamental 
************************
s for finding a fundamental set
of cycles for an undirected linear graph

given the adjacency matrix of the graph, the algorithm
presented in this paper finds a spanning 
tree and then constructs the set of fundamental cycles.
 our algorithm is slower than an algorithm presented 
by welch by a ratio of n/3 (n is the number of nodes)
but requires less storage.  for graphs with a large 
number of nodes and edges, when storage is limited our
algorithm is superior to welch's; however, when 
the graphs are small, or machine storage is very large,
welch's algorithm is superior.  timing estimates 
and storage requirements for both methods are presented.

cacm 
************************

************************
Document:  CACM-2883.html
************************


an application of heuristic search methods to edge and contour detection

this paper presents a method for detecting edges
and contours in noisy pictures.  the properties 
of an edge are embedded in a figure of merit and the edge
detection problem becomes the problem of minimizing 
the given figure of merit.  this problem can be represented
as a shortest path problem on a graph and 
can be solved using well-known graph search algorithms.
 the relations between 
************************
s.
 the relations between this representation of 
the minimization problem and a dynamic programming approach
are discussed, showing that the graph search 
method can lead to substantial improvements in computing
time.  moreover, if heuristic search methods 
are used, the computing 
************************
 
are used, the computing time will depend on the amount
of noise in the picture.  some experimental results 
are given; these show how various information about the
shape of the contour of an object can be embedded
in the figure of merit, thus allowing the extraction
of contours from noisy picture and the separation 
of touching objects.

cacm february, 1976

martelli, a.

picture processing, pattern recognition, edge
detection, contour detection, contour following, 
optimization problems, dynamic programming, shortest
path, heuristic 
************************

************************
Document:  CACM-3124.html
************************


recursive data structures in apl

a mathematical 
************************
 in apl

a mathematical study of three approaches for defining nested
arrays in apl is presented.  theorems exhibiting the relationships
between the definitional systems are given and illustrated through graph
representations.  one of the approaches is used to define an
apl array to be a recursive data structure equivalent to a tree structure
in which all data is stored at the leaves as homogeneous
arrays of numbers and characters.  an extension of apl is proposed that
includes new primitive functions to manipulate the nesting
level of arrays and new operators to assist in the
construction of data-driven algorithms.  

cacm february, 
************************
s.  

cacm february, 1979

gull,w.
jenkins, m.

nested arrays, apl arrays, recursive data structures,
trees, data-driven 
************************
,
trees, data-driven algorithms, theory of arrays


************************

************************
Document:  CACM-2494.html
************************


a computer generated aid for cluster analysis

a computer generated graphic method, which
can be used in conjunction with any hierarchical 
scheme of cluster analysis, is described and illustrated.
 the graphic principle used is the representation 
of the elements of a data matrix of similarities or dissimilarities
by computer printed symbols (of character 
overstrikes) of various shades of darkness, where a
dark symbol corresponds to a small dissimilarity. 
 the plots, applied to a data matrix before clustering
and to the rearranged matrix after clustering, 
show at a glance whether clustering brought forth any
distinctive clusters.  a well-known set of data 
consisting of the correlations of 24 psychological tests
is used to illustrate the comparison of groupings 
by four methods of factor analysis and two methods of cluster analysis.

cacm june, 1973

ling, r. f.

computer graphics, cluster analysis, numerical
taxonomy, hierarchical 
************************

************************
Document:  CACM-2094.html
************************


on an algorithm for nonlinear minimax approximation

************************
 minimax approximation

certain nonlinear minimax approximation problems are characterize
d by properties which permit the application of special algorithms,
mainly based on the 
************************
s,
mainly based on the exchange algorithms of remes (1934, 1935), 
************************
s of remes (1934, 1935), for
their solution.  in this paper the application to problems of this
type of a general nonlinear algorithm due to osborne and watson

************************
 due to osborne and watson
(1969) is considered.  examples are given to illustrate that this
algorithm can give satisfactory results and, in particular, can
successfully solve problems which lead to difficulties
with the more conventional specialist method.

cacm march, 1970

watson, g. a.

minimax approximation, nonlinear approximation, linear programming

5.13 5.41

ca700304 
************************

************************
Document:  CACM-1066.html
************************


growing applications of linear programming

use of linear programming 
************************


use of linear programming models has grown so

************************
 models has grown so
extensively in recent years that the whole concept 
for organizing a computer code has undergone a radical
change.  it no longer is adequate merely to reduce 
a mathematical algorithm (i.e. the simplex method) to
a computer code.  an advanced code must cope with 
such a variety of situations that the respective computer
subprograms must be organized into an integrated 
system.  emphasis in this paper is devoted to the underlying
principles upon which future linear programming 
systems must be based. 
************************
 
systems must be based.  these viewpoints are influenced
by the new demands that applications within the 
petroleum industry are placing on such systems.  some
of the components of such a system are: translation 
of problem statement in terms of basic data to linear
programming matrix coefficients, data transmission 
for direct computer entry, data file at the computer center,
data processing and editing prior to solving 
the simplex algorithm, an efficient and reliable 
************************

************************
Document:  CACM-2253.html
************************


index ranges for matrix calculi

the paper describes a scheme for symbolic
manipulation of index expressions which arise as 
a by-product of the symbolic manipulation of expressions
in the matrix calculi described by the authors 
in a previous paper.  this scheme attempts program optimization
by transforming the original algorithm 
rather than the machine code.  the goal is to automatically
generate code for handling the tedious address 
calculations necessitated by complicated data structures.
 the paper is therefore 
************************
.
 the paper is therefore preoccupied with "indexing 
by position."  the relationship of "indexing by
name" and "indexing by position" is discussed.

cacm december, 1972

bayer, r.
witzgall, c.

address calculations, algorithm transformation,
compilation, data structures, indexing by name, 

************************
, indexing by name, 
indexing by position, index domain, index map, index
range, matrix expressions, normal form, programming 
languages, program optimization, range operations, symbolic

************************

************************
Document:  CACM-1809.html
************************


numerical analysis in a ph. computer science program

numerical analysis 
************************
 program

numerical analysis is the study of methods and
procedures used to obtain "approximate solutions" 
to mathematical problems.  much of the emphasis is on scientific
calculation.  the difficulties of education 
in such a broad area center around the question of background
and emphasis.  the numerical analysis program 
in the computer science department should emphasize 
************************
 department should emphasize an
awareness of the problems of computer implementation 
and experimental procedures.  nevertheless, there is a
need for a solid background in applied mathematics.

cacm december, 1969

parter, s. v.

ph. program, numerical analysis, course separation, 
************************

************************
Document:  CACM-2716.html
************************


optimizing the performance of a relational algebra database interface

an approach for implementing a "smart" interface
to support a relational view of data is proposed. 
 the basic idea is to employ automatic programming techniques
so that the interface analyzes and efficiently 
refines the high level query specification supplied by
the user.  a relational algebra interface, called 
squiral, which was designed using this approach, is described
in detail. squiral seeks to minimize query 
response time and space utilization by: (1) performing
global query optimization, (2) exploiting disjoint 
and pipelined concurrency, (3) coordinating sort orders
in temporary relations, (4) employing directory 
analysis, and (5) maintaining locality in page references.
 algorithms for implementing the 
************************
s for implementing the operators 
of e. f. codd's relational algebra are presented, and
a methodology for composing them to optimize the 
performance of a particular user query is described.

cacm october, 1975

smith, j. m.
yen-tang chang, p.

relational database, database optimization, inverted
file, automatic 
************************
, inverted
file, automatic programming, query language, 
data manipulation language, 
************************

************************
Document:  CACM-2081.html
************************


some complete calculi for matrices

a matrix calculus is introduced with the intention of developing data structures
suitable for a high 
************************

suitable for a high level algorithmic language for mathematical programming.  
the paper investigates how the special structure of matrices can be described
and utilized for efficient computing by saving memory space and
superfluous operations.  sequences of matrices (and sequences of sequences
of matrices) are considered, and matrix operators areext
ended to sequence operators and cumulative operators.  algorithms
are given which use symbol manipulation of matrix expressions so
as to find the forms best suited for computation.  these forms are
called normal forms.  several completeness results are obtained
in the sense that for each expression an equivalent expression
in normal form can be found within a specified calculus.

cacm april, 1970

bayer, r.
witzgall, c.

complete calculus, data structures, linear
programming, 
************************
, linear
programming, matrix, matrix concatenation,

************************

************************
Document:  CACM-1977.html
************************


an interactive display for approximation by linear programming

an interactive program

************************


an interactive program
with a graphical display has been developed for the approximation of
data by means of a linear combination of functions 
************************
 combination of functions (including
splines) selected by the user.  the coefficients of the approximation
are determined by linear programming so as to minimize the 
************************
 so as to minimize the error
in either the l1 or l-infinity norm.  auxiliary conditions such as
monotonicity or convexity of the approximation can also be imposed. this
interactive system is described and several examples of its use are given.

cacm november, 1970

lafata, p.
rosen, j. b.

approximation, data fitting, functional approximation, linear
programming, interactive graphical 
************************

************************
Document:  CACM-2522.html
************************


the design, implementation, and evaluation of a working set dispatcher

the behavior of a computer system is largely
dependent upon the algorithms employed to allocate 
************************
s employed to allocate 
the system resources to the processes competing for them.
 recent research in time-sharing paging systems 
has developed the working set model for program behavior,
and are source allocation strategy based on 
this model has been proposed.  two implementations
along these principles have been reported, but it 
seems that in neither case have further results been
announced.  this report discusses the design and 
implementation of a dispatcher based on the working set
principle, presents data to permit analysis of 
its behavior, and indicates future directions of research
on methods of controlling a computer system.

cacm april, 
************************

************************
Document:  CACM-1196.html
************************


applications of differential equations in general problem solving

a large class of problems leading to digital
computer processing can be formulated in terms 
of the numerical solution of systems of ordinary differential
equations.  powerful methods are in existence 
for 
************************
 are in existence 
for the solution of such systems.  a good general purpose
routine for the solution of such systems furnishes 
a powerful tool for processing many problems.  this is
true from the point of view of ease of programming, 
ease of debugging, and minimization of computer time.
 a number of examples 
************************

************************
Document:  CACM-1658.html
************************


analysis of algorithms for the zero-one programming 
************************
s for the zero-one programming problem

this paper is concerned with a review and examination
of several existing algorithms for the 
zero-one programming 
************************
s for the 
zero-one programming problem.  computational experience
is summarized.  the machine time and storage 
requirements of several of the algorithms are compared
over several 
************************
s are compared
over several test problems of small and intermediate 
size.  computer experiments still provide little hope
of solving problems with over 100 variables with 
a reasonable amount of machine time.

cacm december, 1968

gue, r. l.
liggett, j. c.
cain, k. c.

operations research, optimization theory, integer
programming, zero-one variables, 
************************
, zero-one variables, algorithms

5.39 5.41

ca681208 
************************

************************
Document:  CACM-2306.html
************************


ancient babylonian algorithms

the early origins of mathematics are discussed,
emphasizing those aspects which seem to be 
of greatest interest from the standpoint of computer
science.  a number of old babylonian 
************************

************************
Document:  CACM-2699.html
************************


automatic data structure choice in a language of very high level

setl is a set-theoretically oriented language
of very high level whose repertoire of semantic 
objects includes finite sets, ordered n-tuples, and
sets of ordered n-tuples usable as mappings.  this 
paper describes the structure of an optimizer for this
language.  among other methods of interest, the 
optimizer uses techniques which allow relations of inclusion
and membership to be established, the domains 
and ranges of (tabulated) mappings to be estimated from
above and below, and the single-valuedness of 
(tabulated) mappings to be proved.  once facts of this
kind have been established, automatic choice of 
data structures becomes possible. the methods employed
are based upon, and extend, known techniques of 
data flow analysis.

cacm december, 1975

schwartz, j. t.

program optimization, automatic programming, 
************************
, automatic programming, high-level
languages, set-theoretic languages, data 
structure choice

4.12 
************************

************************
Document:  CACM-2890.html
************************


on quadratic adaptive routing algorithms

two analytic models 
************************
s

two analytic models of a store-and-forward communications
network are constructed, one to find 
the optimal message routing and the other to illustrate
the equilibrium (stationary state) maintained 
by an adaptive routing algorithm.  these models show that
adaptive routing does not satisfy the necessary 
conditions for an optimal routing,  adaptive routing tends
to overuse the direct path and underuse alternate 
routes because it does not consider the impact of its
current routing decision on the future state of 
the network.  the form of the optimality conditions suggests
that a modification of the adaptive algorithm 
will result in optimality.  the modification requires
the substitution of a quadratic bias term instead 
of a linear one in the routing table maintained at each
network node.  simulation results are presented 
which confirm the theoretical analysis for a simple network.

cacm january, 1976

agnew, c. e.

routing algorithms, adaptive routing, quadratic 
************************

************************
Document:  CACM-2936.html
************************


an efficient data structure for the simulation event set

recently algorithms have been presented 
************************
s have been presented for the
realization of event scheduling routines suitable 
for general purpose discrete event simulation systems.
 several exhibited a performance superior to that 
of commonly used simple linked list algorithms.  in this
paper a new 
************************
s.  in this
paper a new event scheduling algorithm is presented 
which improves on two aspects of the best of the previously
published algorithms.  first, the new algorithm's 
************************
.  first, the new algorithm's 
performance is quite insensitive to skewed distributions,
and second, its worst-case complexity is o( 
n), where n is 
************************

************************
Document:  CACM-2931.html
************************


logic and programming languages

logic has been long in terested in whether answers
to certain questions are computable in principle, 
since the outcome puts bounds on the possibilities of
formalization.  more recently, precise comparisons 
in the efficiency of decision methods have become available
through the developments in complexity theory. 
 these, however, 
************************
 theory. 
 these, however, are applications to logic, and a big question
is whether methods of logic have significance 
in the other direction for the more applied parts of
computability theory.  programming languages offer 
an 
************************
 languages offer 
an obvious opportunity as their syntactic formalization
is well advanced; however, the semantical theory 
can hardly be said to be complete.  though we have
many examples, we have still to give wide-ranging 
mathematical answers to these queries:  what is a machine?
 what is a computable process?  how (or how 
well) does a machine simulate a process?  programs naturally
enter in giving descriptions of processes. 
 the definition of the precise meaning of a program
then requires us to explain what are the objects 
of computation (in a way, the statics of the problem)
and how they are to be transformed (the dynamics). 
 so far the theories of automata and of nets, though
most in teresting for dynamics, have formalized only 
a portion of the field, and there has been perhaps too
much concentration on the finite-state and algebraic 
aspects.  it would seem that the understanding of higher-level
program features involves us with infinite 
objects and forces us to pass through several levels
of explanation to go from the conceptual ideas to 
the final simulation on a real machine.  these levels
can be made mathematically exact if we can find 
the right abstractions to represent the necessary structures.
 the experience of many independent workers 
with the method of data types as lattices (or 
************************

************************
Document:  CACM-2767.html
************************


a comparison of simulation event list algorithms

four algorithms are 
************************
s

four algorithms are considered which 
************************
s are considered which can be used
to schedule events in a general purpose discrete 
simulation system.  two of the algorithms are new, one
is based 
************************
s are new, one
is based on an end-order tree structure for event 
notices, and another uses an indexed linear list. the algorithms
are tested with a set 
************************

are tested with a set of typical stochastic 
scheduling distributions especially chosen to show
the advantages and limitations of the algorithms. 
 the end-order tree 
************************

************************
Document:  CACM-2153.html
************************


experiments with an automated instructional system for numerical methods

a computer system was developed 
************************
 system was developed at purdue
university to teach portions of an undergraduate 
course in numerical methods.  each instructional 
************************
.  each instructional unit
or lesson is divided into three modes of instruction 
which allow the student to press from a computer-controlled
presentation to a student-controlled investigation. 
the system is designed as a classroom-independent course
of study, and has been used for two semesters 
by students in lieu of conventional classroom instruction.
 initial measures of effectiveness, student 
acceptance, and operational cost are the result of testing
the system independent of instructor intervention. 
 the system is operational on a cdc 6500 with teletype terminals. 

cacm october, 1971

oldehoeft, a. e.
conte, s. d.

computer-assisted instruction, numerical
methods, cai, instructional 
************************

************************
Document:  CACM-2337.html
************************


a sorting problem and its complexity

a technique for proving min-max norms of sorting
algorithms is given.  one new 
************************
s is given.  one new algorithm for 
finding the minimum and maximum elements of a set with
fewest comparisons is proved optimal with this 
technique.

cacm june, 1972

pohl, i.

sorting, computational complexity, computational combinatorics

************************

************************
Document:  CACM-0409.html
************************


cl-1, an environment for a compiler

a flexible, large-scale programming system to
facilitate the solution of information processing 
problems and to provide intercommunication between programs
and/or programmers has been developed and 
realized on the ibm 709/7090 computer.  the system is
based on a master file concept and has provisions 
for accepting, storing, and retrieving both descriptions
and instances of large and complex data sets, 
as well as algorithms defined on these data 
************************
s defined on these data sets.  both
data and algorithms may be expressed in 
************************

************************
Document:  CACM-1677.html
************************


storage organization in programming systems

the system of program and data representation
that has been in use on the rice university computer 
for five years is described.  each logical entity in storage
occupies a block of consecutive memory locations. 
 each block is labeled by a codeword and may contain
a program, a data vector, or codewords which in 
turn label blocks to form arrays.  this storage arrangement
is discussed with its realized advantages 
or programming systems: simplicity of programmed addressing,
flexibility of data structures, efficiency 
of memory 
************************
, efficiency 
of memory utilization, variability of system composition
during execution, means of linkage between programs 
and from programs to data, and basis for storage protection.
 the application of labeled blocks may be 
extended to areas of time-sharing and multimedia storage
control.  on the basis of experience at rice, 
some ideas on such extensions are presented.

cacm november, 1968

jodeit, j. g.

storage allocation, storage organization, storage
control, codewords, data representation, program 
representation, data structures, storage protection,

************************

************************
Document:  CACM-2924.html
************************


an interactive computer graphics approach to surface representation

an in teractive computer graphics method has been
developed for the rapid generation of arbitrary 
shaped three-dimensional surfaces.  the method is a synthesis
of spline theory and algorithms, an in teractive 
means 
************************
s, an in teractive 
means for man-machine communication, and software for
static or dynamic graphics display.  the basic 
technique employed is a modified lofting method on
which sectional curves are represented by uniform 
b-splines and the surface is in terpolated between sections
by cardinal splines.  among the features of 
this method are algorithms which enable in teractive

************************
s which enable in teractive
modification of the b-spline representation of the 
sectional curves.  at all stages of the process, the
spatial information is graphically displayed to 
the user.  complex surfaces can be created by the combination
of a number of shapes that have been separately 
generated and automatically joined.  the system has been
successfully in terfaced to a variety of analytical 
routines for structural, medical and graphical applications.

cacm october, 1977

wu, sheng-chuan
abel, j. f.
greenberg, d. p.

computer graphics, three-dimensional surface representation,
splines, lofting,finite element input 
methods

3.20 3.23 3.34 8.1 
************************

************************
Document:  CACM-3098.html
************************


computer generation of gamma random variables

a new method for generating random variables
from 
************************
 random variables
from the gamma distribution with nonintegral shape 
parameter a is proposed.  this method is similar to two
other methods recently given by wallace and fishman. 
 it is compared with fishman's and ahrens and dieter's methods.
 the core storage requirements and programming 
effort for this method 
************************
 
effort for this method are similar to those of fishman's
method.  the proposed method is the same as 
fishman's method for 1 < a < 2 and is faster than fishman's
method for 3 < a < 19.  also, the proposed 
method is much simpler than ahrens and dieter's method and is faster for a < 8. 

cacm may, 1978

tadikamalla, p.

gamma variables, rejection method, computer methods

5.5 8.1

ca780509 dh 
************************

************************
Document:  CACM-2389.html
************************


preliminary report on a system for general space planning

a computer language and a set of programs within
that language are described which allow the 
formulating and solving of a class of space planning
problems.  the language is an extension of algol 
and includes means to represent spaces and objects, to manipulate
them, and to test the resulting arrangements 
according to a variety of constraints.  the algorithms
used to solve problems 
************************
s
used to solve problems expressed in this language 
rely on heuristic programming.  both the language
and the search algorithms are detailed.

cacm 
************************

************************
Document:  CACM-2362.html
************************


linear equation solver [f4] (algorithm a423)

cacm april, 1972

************************
 a423)

cacm april, 1972

moler, c. b.

matrix algorithms, linear equations, 
************************

************************
Document:  CACM-2646.html
************************


a model for masking rotational latency by dynamic disk allocation

this paper presents the background and algorithms
for masking the rotational 
************************
s
for masking the rotational latency of a disk 
or drum.  it discusses the anticipatory input and output
of blocks of data to buffer and primary memories 
for a mono-programmed computer system.  a basic permutation
algorithm and several variations are given. 
  because of the anticipatory nature of the i/o scheduling,
these algorithms are restricted to classes 
of programs with predictable behavior.  while the methods
are not restricted to numerical computations, 
matrix 
************************
 computations, 
matrix and partial differential equation methods are
typical examples of their use.  it is shown that 
latency may be masked using a small amount of buffer
memory.  the methods discussed are independent of 
the overall size of the data base being considered.

cacm may, 1974

gold, d. e.
kuck, d. j.

buffer memory, memory hierarchy, permutation algorithm,
rotational latency, 
************************

************************
Document:  CACM-3086.html
************************


on the complexity of computing the measure of u[ai, bi]

the decision tree complexity of computing the
measure of the union of n (possibly overlapping) 
intervals is shown to be  (n log n), even if comparisons
between linear functions of the interval endpoints 
are allowed.  the existence of an   (n log n) lower bound
to determine whether any two of n real numbers 
are within   of each other is also demonstrated.  these
problems provide an excellent opportunity for 
discussing the effects of the computational model on
the ease of analysis and on the results produced.

cacm july, 1978

fredman, m.
weide, b.

analysis of algorithms, combinatorial problems,

************************

************************
Document:  CACM-3165.html
************************


approximation of polygonal maps by cellular maps

the approximation of polygonal thematic maps by cellular
maps, an important operation in geographical data processing,
is analyzed.  the data organization used for representing the polygonal
maps is a widely used segment-based data structure, where class
labels identify the regions bordering each segment on either side.
the approximation algorithm presented operates on such an
organization, eliminating the need for the recognition of region boundaries.
each segment is examined only once.  the versatility of
the new organization is further illustrated by the outline of algorithms
for area computation and point inclusion.  the algorithm is
applied to a set of soil maps converted to computer-readable
form by means of a coordinate digitizer.

cacm september, 1979

nagy, g.
wagle, s.

polygon maps, cellularization, gridding, geographic data structures,
computational geometry, 
************************

************************
Document:  CACM-2433.html
************************


control structures in illiac iv fortran

as part of an effort to design and implement
a fortran compiler on the illiac iv, an extended 
fortran, called ivtran, has been developed.  this language
provides a means of expressing data and control 
structures suitable for exploiting illiac iv parallelism.
 this paper reviews the hardware characteristics 
of the illiac and singles out unconventional features
which could be expected to influence language (and 
compiler) design.  the implications of these features for
data layout and algorithm structure are discussed, 
and the conclusion is drawn that data allocation rather than
code structuring is the crucial illiac optimization 
problem.  a satisfactory method of data allocation is
then presented.  language structures to utilize 
this storage method and express parallel algorithms are described.

cacm 
************************

************************
Document:  CACM-2314.html
************************


requirements for advanced programming systems for list processing

list processing systems should be designed to
facilitate production of large programs to manipulate 
large complex symbolic data stores.  this paper presents
an overview of a number of system features which 
the author feels are important to improve the productivity
of programmers working in such domains.  a 
system view it taken, rather than focusing just on language
features, since algorithms must be not only 
coded 
************************
s must be not only 
coded in a language form, but debugged, modified, made
efficient, and run on data.  because of this general 
framework,the requirements specified are applicable
to the design of advanced programming systems for 
a wide range of applications.  three aspects of programming
systems are highlighted: good interactive 
facilities, programmable control structures, and sophisticated
data 
************************
, and sophisticated
data communication mechanisms.  interactive 
features are described to facilitate program composition,
entry, testing, debugging, editing, optimization, 
and packaging.  implementation of a generalized environment
structure model specified would allow programming 
of various control regimes including multiprocesses,
coroutines and backtracking.  alternative methods 
of procedure invocation required include invocation
by pattern and by monitoring condition.  the  need 
for extended data forms, storage management, and extensibility
are stressed, as is the duality of data 
retrieval and function evaluation.  syntax directed
input and output of data would facilitate use of 
complex data stores.

cacm july, 1972

bobrow, d. g.

list processing, programming languages, design of
programming languages, interactive systems, control 
structures, data structures, programming 
************************
, data structures, programming primitives,

************************

************************
Document:  CACM-2226.html
************************


further evidence for the analysis of algorithms
for the zero-one programming 
************************
s
for the zero-one programming problem

the purpose of this note is to report computational
experience additional to that recently 
summarized by gue et al, with two algorithms for the
zero-one linear 
************************
s for the
zero-one linear programming problem.  an error in 
************************
 problem.  an error in 
gue's paper is corrected.  the utility of one of
the algorithms as a suboptimizer is 
************************
s as a suboptimizer is indicated.

cacm january, 1971

proll, l. g.

operations research, integer programming, zero-one variables, algorithms

5.39 5.41

ca710108 
************************

************************
Document:  CACM-2366.html
************************


complex gamma function with error control

an algorithm to compute the gamma function and
log gamma function of a complex variable is presented. 
 the standard algorithm is modified in several respects
to insure the continuity of the function value 
and to reduce accumulation of round-off errors.  in
addition to computation of function values, this 
algorithm includes an object-time estimation of round-off
errors.  experimental data with regard to the 
effectiveness of this error control are presented. 
a fortran program for the algorithm appears in the 
algorithms section of this issue.

************************

************************
Document:  CACM-2200.html
************************


on complement division

the division algorithm theorem is expressed
in a form that permits it to serve as the basis 
for devising division operations that produce both quotient
and remainder in complement form.  algorithms 
for division yielding complement results are derived
for numbers represented in any base greater than 
one.  both radix and radix-less-one complementation schemes
are considered.  the binary form of the algorithms 
thus includes both two's and one's 
************************

************************
Document:  CACM-2722.html
************************


multidimensional binary search trees used for associative searching

this paper develops the multidimensional binary
search tree (or k-d tree, where k is the dimensionality 
of the search space) as a data structure for storage of
information to be retrieved by associative searches. 
the k-d tree is defined and examples are given. it
is shown to be quite in its storage requirements. 
 a significant advantage of this structure is that a single
data structure can handle many types of queries 
very efficiently.  various utility algorithms are developed;
their 
************************
s are developed;
their proven average running times in an 
n record file are: insertion, o (log n); deletion of
the root, o (n^(k-1)/k); deletion of a random node, 
o (log n); and optimization (guarantees logarithmic performance
of searches), o (n log n).  search algorithms 
are given for partial 
************************
s 
are given for partial match queries with t keys specified
[proven maximum running time of o (n^(k-t)/k)] 
and for nearest neighbor queries [empirically observed average
running time of o (log n).]  these performances 
far surpass the best currently known algorithms for
these tasks.  an 
************************

************************
Document:  CACM-1324.html
************************


answering english questions by computer: a survey

fifteen experimental english language question-answering
systems which are programmed and operating 
are described and reviewed.  the systems range from a conversation
machine to programs which make sentences 
about pictures and systems which translate from english
into logical calculi.  systems are classified 
as list-structured data-based, graphic data-based, text-based
and inferential.  principles and methods 
of operations are detailed 
************************
 
of operations are detailed and discussed.  it is concluded
that the data-base question-answer has passed 
from initial research into the early developmental
phase.  the most difficult and important research 
questions for the advancement of general-purpose language
processors are seen to be concerned with measuring, 
dealing with ambiguities, translating into formal
languages and searching large tree structures.

cacm january, 1965

************************

************************
Document:  CACM-0950.html
************************


parallel methods for integrating ordinary differential equations

this paper is dedicated to the proposition that,
in order to take full advantage for real-time 
computations of highly parallel computers as can be
expected to be available in the near future, much 
of numerical analysis will have to be recast in a more
"parallel" form.  by this is meant that serial 
algorithms ought to be replaced 
************************
s ought to be replaced by algorithm which
consist of several subtasks which can be computed 
without knowledge of the results of the other subtasks. 
as an example, a method is proposed for "parallelizing" 
the numerical integration of an ordinary differential
equation, which process, by all standard methods, 
is entirely serial.

************************

************************
Document:  CACM-2402.html
************************


pictorial pattern recognition and the
phase problem of x-ray crystallography

the availability of interactive, three-dimensional,
computer graphics systems coupled to powerful 
digital computers encourages the development of algorithms
adapted to this environment. 
************************
s
adapted to this environment.  pictorial pattern 
recognition techniques make possible a number of approaches
to x-ray structure determination based on 
molecular model building, i.e. the use of chemical information
to frame "structural hypotheses" which 
can computationally be tested and refined by reference
to the experimental data.  application of standard 
pattern recognition algorithms is hindered by the 
************************
s is hindered by the fact
that the cross-correlation between a model and 
the correct structure cannot be computed because of
a fundamental incompleteness in the measured data. 
 however, it is possible to compute an upper bound to such
a cross-correlation.  a simple example demonstrates 
that this information can be the basis of a technique
for structure determination that can make effective 
use of an interactive graphics system. model building
by cross-correlations has intrinsic advantages 
over usual crystallographic techniques based on the
autocorrelation or patterson function, especially 
for large structures.  this is significant, 
************************

************************
Document:  CACM-3037.html
************************


a linear sieve algorithm for finding prime numbers

a new algorithm is presented for finding all
primes between 2 and n.  the algorithm executes 
in time proportional to n (assuming that multiplication
of integers not larger than n can be performed 
in unit time).  the method has the same arithmetic complexity
as the algorithm presented by mairson [6]; 
however, our version is perhaps simpler and more elegant.
 it is also easily extended to find the prime 
factorization of all integers between 2 and n in time proportional to n.   

cacm december, 1978

gries, d.
misra, j.

primes, algorithms, data structures

5.25 5.24 5.29

ca781202 
************************

************************
Document:  CACM-0095.html
************************


elimination of special functions from differential equations

a set of ordinary differential equations which
contains mathematical functions requiring the 
use of subroutines for numerical solution by electronic
computer, tabular data for numerical solution 
by hand calculation or function generators when analog
methods are applied can sometimes 
************************

************************
Document:  CACM-1769.html
************************


the expanding world of computers

the onward sweep of automatic processing of
information is impeded by nine principal barriers: 
geography, cost, problem complexity, man-machine communication,
inadequate sensors, lack of understanding, 
distance, time, and size.  the main incentive for breaching
these barriers is the universal need for 
processing information, ever more urgent as the greater
part of human work activity changes from production 
to service.  computer developments in hardware, programming,
time-sharing, education, data communication, 
and 
************************
 communication, 
and displays are judged by how effectively they remove these
barriers, and their barrier-smashing potentialities 
indicate continued rapid expansion.  problem-oriented
languages are particularly effective over the entire 
front.  online computers and time-sharing also rate high
by this measure.  education and increased understanding 
are basic to all progress with the computer.  this complex
but powerful tool is the most important one 
available to governments and scientists to use in studying
the problems being created by the population 
explosion, and in analyzing possible solutions.

cacm april, 1968

harder, e. l.

barriers, philosophy, developments, computer-aided design,
problem-oriented languages, data communication, 
education, computer science, forecast, survey, introduction

************************

************************
Document:  CACM-1873.html
************************


accelerating lp algorithms

it is shown how a novel method for computing
(related) inner products can accelerate the pricing 
phase of lp algorithms.  other lp applications are indicated.

cacm july, 1969

fox, b. l.

linear programming, revised simplex
method, 
************************

************************
Document:  CACM-2665.html
************************


copying list structures using bounded workspace

two new algorithms are presented for list 
************************
s are presented for list structure
copying using bounded workspace.  the first, 
of primarily theoretical interest, shows that without
cell tag bits the task can be performed in time 
n^2.  the second algorithm, assuming one tag bit in
each cell, delivers attractive practical speed.  
any noncyclic structure is copied in linear speed, while
cyclic structures are copied in average 
************************
 are copied in average time 
less than nlogn.  no foreknowledge of cycle absence
is necessary to achieve linear speed.  a variation 
of the second algorithm solves an open problem 
************************

************************
Document:  CACM-2899.html
************************


a survey of computer science offerings in small liberal 
************************
 offerings in small liberal arts colleges.

recent curricular development in computer science
together with student 
************************

together with student in terest in pursuing 
topics in computer science beyond the usual programming

************************
 beyond the usual programming
courses have encouraged small liberal arts colleges 
to expand their offerings.  this paper summarizes the
results of a survey taken to determine the type 
of computer science programs being offered 
************************
 programs being offered in these
colleges.  the results indicate that over half of 
these colleges either have no computer science
program or offer only 
************************

program or offer only programming courses.

cacm december, 1977

lopez, a. a.
raymond, r.
tardiff, r.

computer science, education, curricula, 
************************

************************
Document:  CACM-2701.html
************************


a fast and usually linear algorithm for global
flow analysis 
************************
 for global
flow analysis (abstract only--complete paper jacm 
23,1 january, 1976)

a new algorithm for global flow analysis on
reducible graphs is presented. the algorithm is 
shown to treat a very general class of function spaces.
 for a graph of e edges, the algorithm has a 
worst case time bound of o(e log e) function operations.
 it is also shown that in programming terms, 
the number of operations is proportional to e plus the
number of exits from program loops.  consequently 
a restriction to one-entry one-exit control structures
linearity.  the algorithm can 
************************
ity.  the algorithm can be extended to yet 
larger classes of function spaces and graphs by relaxing
the time bound.  examples are given of code 
improvement problems which can be solved using the algorithm.

cacm december, 1975

graham, s. l.
wegman, m.

global flow analysis, data flow, code optimization,
common subexpression 
************************

************************
Document:  CACM-2267.html
************************


algorithms to reveal properties 
************************
s to reveal properties of floating-point arithmetic

two algorithms are presented in the 
************************
s are presented in the form of
fortran subroutines.  each subroutine computes 
the radix and number of digits of the floating-point
numbers and whether rounding or chopping is done 
by the machine on which it is run.  the methods are
shown to work on any "reasonable" floating-point 
computer.

cacm november, 1972

************************

************************
Document:  CACM-3018.html
************************


covering edges by cliques with regard to
keyword conflicts and intersection graphs

kellerman has presented a method for determining
keyword conflicts and described a heuristic 
algorithm which solves a certain combinatorial optimization
problem in connection 
************************

problem in connection with this method.  
this optimization problem is here shown to be equivalent
to the problem of covering the edges of a graph 
by complete subgraphs with the objective of minimizing
the number of complete subgraphs.  a relationship 
between this edge-clique-cover problem and the graph coloring
problem is established which allows algorithms 
for either one of 
************************
s 
for either one of these problems to be constructed
from algorithm for the other.  as consequences of 
this relationship, the keyword conflict problem and the
edge-clique-cover problem are shown to be np-complete, 
and if p=/np then they do not admit polynomial-time approximation
algorithms which always produce solutions 
within a factor less than 2 from the optimum.

cacm february, 1978

kou, l.
stockmeyer, l.
wong, c.
watson, t.

keyword conflicts, intersection graphs, node clique
cover, edge clique cover, computational complexity, 
np-complete problems, 
************************

************************
Document:  CACM-2276.html
************************


computer methods for sampling from
the 
************************
 for sampling from
the exponential and normal distributions

various methods are known for transforming uniformly
distributed random numbers into exponentially
and normally distributed quantities.  the most efficient
ones are compared, in terms of memory requirements 
and speed, with some new algorithms.  a number of procedures

************************
s.  a number of procedures
convert taylor series expansions directly 
into sampling steps, an approach which may be used for
sampling from any continuous distribution.  for 
the exponential distribution a definite recommendation
can be made, whereas in the case of the normal 
distribution there remains a choice between slower and
shorter algorithms and faster but space 
************************
s and faster but space consuming 
methods.

cacm october, 1972

ahrens, j. h.
dieter, u.

random numbers, pseudorandom, normal distribution,
exponential distribution, exponential distribution, 
simulation, numerical analysis

3.29 3.57 
************************

************************
Document:  CACM-2570.html
************************


a comparison of list schedules for parallel processing systems

the problem of scheduling two or more processors
to minimize the execution time of a program 
which consists of a set of partially ordered tasks
is studied.  cases where task execution times are 
deterministic and others in which execution times are
random variables are analyzed.  it is shown that 
different algorithms suggested in the literature 
************************
s suggested in the literature vary significantly
in execution time and that the b-schedule 
of coffman and graham is near-optimal.  a dynamic programming
solution for the case in which execution 
times are random variables is presented.

cacm december, 1974

adam, t. l.
chandy, k. m.
dickson, j. r.

parallel processing, precedence graphs, scheduling,
list scheduling, optimization, dynamic programming

************************

************************
Document:  CACM-2766.html
************************


copying cyclic list structures in linear time using bounded workspace

************************
 time using bounded workspace

a bounded workspace copying algorithm for arbitrary
list structures is given.  this algorithm 
operates in linear time and does not require 
************************
 time and does not require tag bits. 
the best previous bounded workspace copying algorithms 
achieved n^2 time without tag bits and n log n time with
one tag.  the only restriction on the algorithm 
given here is that the copy must be placed into a contiguous
section of memory.  the method is applicable 
to fixed or variable size nodes.

cacm may, 1975

fisher, d. a.

list processing, copying, linear time, space complexity

4.49 5.25

ca750501 
************************

************************
Document:  CACM-1195.html
************************


uplifts-university of pittsburgh linear file tandem system

a series of computer programs has been developed

************************
 programs has been developed
and is now operational for processing the 
national aeronautics and space administration linear file
system on an ibm 1401-7090 combined data processing 
system. 
************************
 processing 
system.  the program are note-worthy in that they create
fixed length logical records and fixed length 
blocks from variable length source data, and format
the output for optimization of processing on the 
************************

************************
Document:  CACM-2903.html
************************


improving programs by the introduction of recursion

a new technique of program transformation,
called "recursion in troduction," is described and 
applied to two algorithms which solve pattern 
************************
s which solve pattern matching problems.
 by using recursion in troduction, algorithms 
which manipulate a 
************************
s 
which manipulate a stack are first translated into
recursive algorithms in which no stack operations 
************************
s in which no stack operations 
occur.  these algorithms are then subjected 
************************
s are then subjected to a second
transformation, a method of recursion elimination 
called "tabulation," to produce programs with a very
efficient running time.  in particular, it is shown 
how the fast linear pattern matching algorithm of knuth,
morris, and 
************************
 of knuth,
morris, and pratt can be derived in a few steps 
from a simple nonlinear stack algorithm.

cacm november, 1977

************************
.

cacm november, 1977

bird, r. s.

program transformation, optimization of programs,
recursion elimination, pattern matching algorithms, 
stacks, computational 
************************

************************
Document:  CACM-1959.html
************************


an interrupt based organization for management information systems

a programming structure, language constructs, and a supervisory system 
organization are proposed
for the design and coding of large shared data base systems.  the
bases for this organization are a generalized interrupt structure
and the newly introduced concept of "file tagging," which is the
process of associating program structures and interrupt generating
conditions with items in the data base.  an algorithm for resolving
conflicts 
************************
 for resolving
conflicts which arise in scheduling the interrupt processing routines
is presented.  dpl, a programming language and supervisory
system in which these concepts are implemented, is used to illustrated
the new organization which is proposed for management information systems.

cacm december, 1970

morgan, h. l.

management information systems, integrated data processing,
supervisors, 
************************

************************
Document:  CACM-2324.html
************************


management science: a view from nonlinear programming

a brief history of 
************************


a brief history of integer and continuous
nonlinear programming is presented as well 
************************
 is presented as well as the 
current obstacles to practical use of these mathematical
programming techniques.  it is forecast that 
the useful contributions to nonlinear programming actually
made in the next few years are more likely 
to be consolidations than theoretical breakthroughs.  these
contributions are likely to be the documentation 
of standard test problems, construction of user oriented
software, and comparisons of currently known 
algorithms to demonstrate which 
************************
s to demonstrate which techniques are best for specific problems.

cacm july, 1972

shanno, d. f.
weil, r. l.

integer programming, linear programming, mathematical
programming, nonlinear programming, quadratic 
programming, management science, operations research, algorithms

5.41 8.3

ca720704 
************************

************************
Document:  CACM-1719.html
************************


a methodology for calculating and
optimizing real-time system performance

the continually increasing size, complexity,
number of types, and cost of data processing systems 
are causing serious re-examination within government
and industry of the criteria for and methods of 
calculating and optimizing data processing system cost
and performance.  real-time data processing systems 
as typified by the automated airline reservation system
are discussed in this paper.  criteria for evaluating 
performance are described; a methodology for calculating
and optimizing is outlined; and the method is 
illustrated by carrying out a portion of the performance
calculation and the optimization of a drum-oriented 

************************

************************
Document:  CACM-2904.html
************************


an algorithm for reduction of operator strength

a simple algorithm which uses an indexed temporary
table to perform reduction of operator strength 
in strongly connected regions is presented.  several extensions,
including linear function test replacement, 
are discussed.  these algorithms should fit well into an
integrated package of local optimization algorithms.

cacm november, 
************************
 algorithms.

cacm november, 1977

************************

************************
Document:  CACM-3132.html
************************


experiments with some algorithms that find
central solutions 
************************
s that find
central solutions for pattern classification

in two-class pattern recognition, it is a standard
technique to have an algorithm finding hyperplanes
which separates the two classes in a linearly separable training
set.  the traditional methods find a hyperplane which separates all
points in the other, but such a hyperplane is not necessarily centered
in the empty space between the two classes.  since a central
hyperplane does not favor one class or the other, it should have
a lower error rate in classifying new points and is therefore better
than a noncentral hyperplane.  six algorithms for finding central
hyperplanes are tested on three data sets.  although frequently

************************
 sets.  although frequently
used practice, the modified relaxation algorithm is very poor. 
three algorithms which are defined in 
************************
 which are defined in the paper are found to be
quite good.

cacm march, 1979

slagle, j.

pattern recognition, pattern classification, linear discriminants, central
hyperplanes, centering, centrality criteria, dead zone, hyperplane,
linearly separable, relaxation algorithm, accelerated relaxation

************************

************************
Document:  CACM-2953.html
************************


notes on recursion elimination

various methods of recursion elimination are
applied to the schematic recursive procedure: 
proc s(x); px then n(x); s(fx); s(gx); m(x) fi.  procedures
with this general form arise in connection 
with tree traversal and sorting algorithms.  each method
of recursion 
************************
s.  each method
of recursion removal involves the use of one 
or more stacks, and the solutions are compared
on the basis of their running time.

cacm june, 1977

bird, r. s.

recursion elimination, optimization of programs,
stacks, trees, sorting algorithms, computational 
induction

************************

************************
Document:  CACM-1457.html
************************


data manipulation and programming problems
in automatic 
************************
 problems
in automatic information retrieval

automatic information retrieval programs require
the manipulation of a variety of different 
data structures, including linear text, 
************************
, including linear text, sparse matrices,
and tree or list structures.  the main data 
manipulations 
************************
.  the main data 
manipulations to be performed in automatic information
systems are first briefly reviewed.  a variety 
of data representations which have been used to describe
structured information are then examined, and 
the characteristics of various processing languages are
outlined in the light of the procedures requiring 
implementation.  advantages of these programming languages
for the retrieval 
************************

************************
Document:  CACM-2592.html
************************


on generation of test problems for linear programming codes

users of linear programming computer codes have
realized 
************************
 codes have
realized the necessity of evaluating the capacity, 
effectiveness, and accuracy of the solutions provided
by such codes.  large scale linear programming 
codes at most installations 
************************
 
codes at most installations are assumed to be generating correct
solutions without ever having been "bench-marked" 
by test problems with known solutions.  the reason for
this failure to adequately test the codes is that 
rarely are there large problems with known solutions readily
available.  this paper presents a theoretical 
justification and an illustrative implementation of a method
for generating linear programming test problems 
with 
************************
 test problems 
with known solutions.  the method permits the generation
of test problems that are of arbitrary size 
and have a wide range of numerical characteristics.

cacm october, 1974

charnes, a.
raike, w. m.
stutz, j. d.
walters, a. s.

linear programming, test problem generation,

************************

************************
Document:  CACM-2325.html
************************


numerical mathematics and computer science

numerical mathematics 
************************


numerical mathematics is viewed as the analysis
of continuous algorithms.  four of the components 
of numerical mathematics are discussed.  these are: foundations
(finite precision number systems, computational 
complexity), synthesis and analysis of algorithms,
analysis of error, programs and program libraries.

cacm july, 1972

traub, j. f.

numerical mathematics, computer science, mathematics
of computation, 
************************
, mathematics
of computation, algorithms, continuous algorithms

************************
s, continuous algorithms

1.3 5.0 5.1 5.25


************************

************************
Document:  CACM-2285.html
************************


computer routine for quadratic and linear
programming problems [h] (algorithm 
************************
 problems [h] (algorithm a431)

a computer program based on lemke's complementary
pivot algorithm is presented.  this can be 
used to solve linear and quadratic programming problems.
 the program 
************************
 problems.
 the program has been extensively tested on
a wide range of problems and the results have been extremely satisfactory.

cacm september, 1972

ravindran, a. 

linear program, quadratic program, complementary
problem, lemke's algorithm, simplex method

5.41

************************

************************
Document:  CACM-1049.html
************************


numerical solution of nonlinear two-point
boundary problems 
************************
 two-point
boundary problems by finite difference methods

solution of nonlinear two-point boundary-value

************************
 two-point boundary-value
problems is often an extremely difficult task. 
 quite apart from questions of reality and uniqueness,
there is no established numerical technique for 
this problem.  at present, shooting techniques are the
easiest method of attacking these problems.  when 
these fail, the more difficult method of finite differences
can often be used to obtain a solution.  
this paper gives examples and discusses the finite difference
method for non-linear two-point boundary-value 
************************

************************
Document:  CACM-1353.html
************************


techniques for automatic tolerance control in linear programming

in this technical note, 
************************


in this technical note, the numerical steps
for the simplex method of linear programming are 
reviewed and the 
************************

************************
Document:  CACM-3166.html
************************


computing standard deviations: accuracy

four algorithms for the numerical computation
of the standard 
************************
 computation
of the standard deviation of (unweighted) sampled data
are analyzed.  two of the algorithms are well-known in the 
************************
s are well-known in the statistical
and computational literature; the other two are new algorithms
specifically intended 
************************
s
specifically intended for automatic computation.  our discussion is 
expository, with emphasis on reaching a suitable definition of
"accuracy."  each of the four algorithms is analyzed for the 
************************
s is analyzed for the conditions
under which it will be accurate.  we conclude that all four
algorithms will provide accurate 
************************
s will provide accurate answers for many problems, but two
of the algorithms, one new, one old, 
************************

************************
Document:  CACM-3103.html
************************


automatic data structure selection: an example and overview

the use of several levels of abstraction has
proved to be very helpful in constructing and 
maintaining programs.  when programs are designed with abstract
data types such as sets and lists, programmer 
time can be saved by automating the process of filling
in low-level implementation details.  in the past, 
programming systems have provided only a single general
purpose implementation for an abstract type. 
 thus the programs produced using abstract types were
then inefficient in space or time.  in this paper 
a system for automatically choosing efficient implementations
for abstract types from a library of implementations 
is discussed.  this process is discussed in detail for
an example program.  general issues in data structure 
selection are also reviewed. 

cacm may, 1978

low, j.

abstract data types, automatic programming, data
structures, optimizing compilers, 
************************

************************
Document:  CACM-2484.html
************************


a note on information organization and storage

since the logical structure of a data base
can be represented by a tree or graph, it is quite 
natural for us to view the process of designing a data
base as that of constructing a tree or a graph. 
 a general method for constructing such a tree or a graph
is provided.  there are three important elements 
in this general construction method; namely, a set of
binary relations, an algorithm for constructing 
subsets of a set, and an algorithm for selecting an
element from the given set of objects.  the use of 
different relations and algorithms results in different
information structures, as list, tree, ring, 
************************
, as list, tree, ring, 
etc.  thus the problem of information organization and
storage is reduced to that of defining relations 
and formulating algorithms under a given set of 
************************

************************
Document:  CACM-1385.html
************************


computer technology in communist china, 1956-1965

based on information from translations of communist
chinese news items and periodical literature 
for the 1965 period, computer technology in china is
reviewed under the following headings: (1) initial 
planning, organization and educational aspects of computer
technology and automation; (2) machine development 
progress: two major specific machines in 1958-59, with
soviet aid; a vacuum in 1960-64 due to the withdrawal 
of soviet aid; then presumably all-chinese-made machines
from 1965 to the present; (3) computer applications; 
(4) the trend of automation: control of production processes
rather than data processing; and (5) the 
"yun ch'ou hsueh" (science of operation and programming)
campaign of 1958-60, 
************************
)
campaign of 1958-60, during which an attempt 
was made to bring concepts such as linear programming
to ordinary chinese 
************************

************************
Document:  CACM-2837.html
************************


new upper bounds for selection

the worst-case minimum number of comparisons
complexity vi(n) of the i-th selection problem 
is considered.  a new upper bound for vi(n) improves the
bound given by the standard hadian-sobel algorithm 
by a generalization of the kirkpatrick-hadian-sobel
algorithm, and extends kirkpatrick's method to a 
much wider range of application.  this generalization
compares favorably with a recent algorithm by hyafil.

cacm september, 1976

yap, c. k.

selection problem, algorithms, comparison problems,

************************

************************
Document:  CACM-3130.html
************************


curriculum '78 - recommendations for the
undergraduate program in computer science

contained in this report 
************************


contained in this report are the recommendations for
the undergraduate degree program in computer science of the
curriculum committee 
************************
 of the
curriculum committee on computer science (c3s) of the association

************************
 (c3s) of the association
for computing machinery (acm).   the core curriculum common to all
computer science undergraduate programs 
************************
 undergraduate programs is presented in terms of
elementary level topics and courses, and intermediate level courses.
elective courses, used to round out an undergraduate program,
are then discussed, and the entire program including the computer
science component and other 
************************
 component and other material is presented.  issues related
to undergraduate computer science education, such as service

************************
 education, such as service
courses, supporting areas, continuing education, facilities,
staff, and articulation are presented.

cacm march, 1979

austing, r.
barnes, b.
bonnette, d.
engel, g.
stokes, g.

computer sciences courses, computer science 
************************
s courses, computer science curriculum, computer

************************
 curriculum, computer
science education, computer 
************************
 education, computer science undergraduate degree

************************

************************
Document:  CACM-2877.html
************************


a program data flow analysis procedure

the global data relationships in a program
can be exposed and codified by the static analysis 
methods described in this paper.  a procedure is given
which determines all the definitions which can
possibly "reach" each node of the control flow graph
of the program and all the definitions that are 
"live" on each edge of the graph.  the procedure uses
an "interval" ordered edge listing data structure 
and handles reducible and irreducible graphs indistinguishably.

cacm march, 1976

allen, j. e.
cocke, j.

program optimization, data flow analysis,
flow graphs, algorithms, compilers

4.12 5.24

************************

************************
Document:  CACM-1744.html
************************


stable numerical methods for obtaining the chebyshev

************************
 for obtaining the chebyshev
solution to an overdetermined system of 
equations

an implementation of stiefel's exchange algorithm
for determining a chebyshev solution to an 
overdetermined system of linear equations is presented,

************************
 equations is presented,
that uses gaussian lu decomposition with row 
interchanges.  the implementation is computationally more
stable than those usually given in the literature. 
 a generalization of stiefel's algorithm is developed which
permits the occasional exchange of two equations 
simultaneously.

cacm june, 1968

bartels, r. h.
golub, g. h.

chebyshev solutions, overdetermined linear
systems, linear equations,exchange 
************************

systems, linear equations,exchange algorithm

5.13 5.14 5.41

ca680601 
************************

************************
Document:  CACM-3055.html
************************


an analysis of algorithms for the dutch national 
************************
s for the dutch national flag problem

solutions to the dutch national flag problem
have been given by dijkstra [1] and meyer [3]. 
 dijkstra starts with a simple program and arrives at
an improved program by refinement.  both of the 
algorithms given by dijkstra are 
************************
s given by dijkstra are shown to have an expected number
of swaps which is 2/3n + 0(1) and that 
these values differ at most by 1/3 of a swap and asymptotically
by 1/4 of a swap.  the algorithm of meyer 
is shown to have expected swap complexity 5/9n.

cacm october, 
************************
 5/9n.

cacm october, 1978

mcmaster, c.

algorithmic analysis, dutch national flag
problem, refinement, structured programming

4.0 5.24 5.25 5.3


************************

************************
Document:  CACM-3138.html
************************


a mathematical programming updating method using modified
givens transformations and applied to lp problems

an efficient and numerically stable method is presented for the problem of
updating an orthogonal decomposition of a matrix of column (or row) vectors.
the fundamental idea is to add a column (or row) analogous
to adding an additional row of data in a linear least squares problem.

************************
 least squares problem.
a column (or row) is dropped by a formal scaling with the
imaginary unit,  -1, followed by least squares addition of the column
(or row).  the elimination process for the procedure is successive
ssive application of the givens transformation in modified (more efficient)
form.  these ideas are illustrated with an implementation
of the revised simplex method.  the algorithm is a general purpose
one that does not account for any particular structure or sparsity
in the equations.  some suggested computational tests for determining
signs of various controlling parameters in the revised simplex
algorithm are mentioned.  a simple means of constructing
test cases and some sample computing times are presented. 

cacm april, 1979

hanson, r.
wisniewski, j.

linear programming, numerical linear algebra, 
************************
, numerical linear algebra, modified givens 
************************
 algebra, modified givens transformations,
linear programming test cases

5 5.4 5.41 
************************

************************
Document:  CACM-1651.html
************************


an interpretive input routine for linear programming

in this descriptive 
************************


in this descriptive article an input code
is presented which greatly simplifies data input 
to any linear programming solution routine, for 
************************
 solution routine, for subsequent
use either as a pedagogical device or for 
solving rather small lp problems.  this latter (limited)
use derives not at all from inherent limitations 
in the code itself, but from an efficiency evaluation:
large lp problems would doubtless benefit from 
an input system more suited for bulk data handling than
the input code described.  from a user's standpoint, 
input appears almost exactly as a textbook presentation
of the lp problem (limited only by a keypunch's 
inability to write subscripts, etc.).  the input interpreter
scans column wise, thus no fixed format 
data preparation is required.  the user may also, under
very general requirements only, liberally use 
editorial comments throughout the input deck as an
aid in identification, e.g., of row constraints.  
the article includes examples of input, output 
************************

************************
Document:  CACM-3010.html
************************


value orientation of computer science students

technological 
************************
 students

technological and nontechnological value orientations
are investigated with special attention 
to the complexity of value structures.  computer science
students, who are closely 
************************

students, who are closely associated with technology, 
contrast with social science students, who are often
technologically aloof.  this is confirmed by the 
value ratings of 313 students at the university of minnesota
in 1972.  computer science majors were 
************************

************************
Document:  CACM-1433.html
************************


a note on linear programming algorithm design: a combinatorial 
************************
 design: a combinatorial problem

as linear programming models grow bigger and

************************
 models grow bigger and
bigger in size, much actual data that must be 
memorized is often put on magnetic tape or disk, and
consequently there is an improportionality fast 
rise in the consumption of computer timeo cut down
this expense, an ever increasing effort is made 
to design more efficient algorithms.  this paper is
meant 
************************
s.  this paper is
meant to support the effort.  it is attempted to 
find some characteristics of the way a pivot column
is found.  the number of repetitions of a certain 
transfer of data from tape to core memory is considered.
 after some simplification, the problem is restated 
in a general way.  the generating function of the probability
distribution and the moment generating 
function of the number of repetitions is found.  asymptotic
formulas are given for the moments using 
a result from a paper of s. narumi [1].  the results
may be applied to write very efficient routines 
that search for an extreme value in a table.  formulas
provide a means of calculating the computer timings 
in this case.

************************

************************
Document:  CACM-2195.html
************************


on the optimal detection of curves in noisy pictures

a technique for recognizing systems of lines
is presented.  in this technique the heuristic 
of the problem is not embedded in the recognition algorithm
but is expressed in a figure of merit.   
a multistage decision process is then able to recognize
in the input picture the optimal system of lines 
according to the given figure of merit.  due to the
global approach, greater flexibility and adequacy 
in the particular problem is achieved.  the relation
between the structure of the figure of merit and 
the complexity of the optimization process is then discussed.

************************
 process is then discussed.
 the method described is suitable for parallel 
processing because the operations relative to each
state can be computed in parallel, and the number
of stages is equal to the length n of the curves (or
to log2 n if the approximate method is used).

cacm may, 1971

montanari, u.

picture processing, picture recognition, picture
description, curve detection, line detection, 
edge detection,optimal detection, heuristic methods,
global recognition, parallel processing, dynamic 
programming, interaction graph, secondary optimization problem

3.63 3.66 5.42

************************

************************
Document:  CACM-2932.html
************************


complexity of computations

the framework for research in the theory of complexity
of computations is described, emphasizing 
the in terrelation between seemingly diverse problems
and methods.  illustrative examples of practical 
and theoretical significance are given.  directions
for new research are discussed.

cacm september, 1977

rabin, m. o.

complexity of computations, algebraic complexity,
in tractable problems, probabilistic algorithms

5.25

ca770901 jb 
************************

************************
Document:  CACM-2832.html
************************


faster retrieval from context trees (corrigendum)

context trees provide a convenient way of
storing data which is to be viewed as a hierarchy 
of contexts.  this note presents an algorithm which improves
on previous context tree retrieval algorithms. 
it is based on the 
************************
. 
it is based on the observation that in typical uses context
changes are infrequent relative to retrievals, 
so that data can be cached to speed up retrieval.  a retrieval
is started from the position of the previous 
retrieval and auxiliary structures are built up to make
the search rapid.  algorithms for addition and 
deletion 
************************
s for addition and 
deletion of data and for garbage collection are outlined.

cacm september, 1976

wegbreit, b.

context trees, frame problem, variable bindings, data structures

3.69 3.74 4.10

ca760907 
************************

************************
Document:  CACM-2819.html
************************


experiments in text file compression

a system for the compression of data files,
viewed as strings of characters, is presented. 
 the method is general, and applies equally well to
english, to pl/i, or to digital data.  the system 
consists of an encoder, an analysis program, and a decoder.
  two algorithms for encoding a string 
************************
s for encoding a string differ 
slightly from earlier proposals.  the analysis program attempts
to find an optimal set of codes for representing 
substrings of the file.  four new algorithms for this
operation 
************************
s for this
operation are described and compared.  various 
parameters in the algorithms are optimized to obtain

************************
s are optimized to obtain
a high degree of compression for sample texts.

cacm november, 1976

rubin, f.

text compression, data file compaction, huffman
codes, n-gram encoding, comparison of algorithms

3.7 3.73 4.33

ca761104 
************************

************************
Document:  CACM-1619.html
************************


error-free methods for statistical computations

neely has discussed computational error generated
by some algorithms used to compute various 
************************

