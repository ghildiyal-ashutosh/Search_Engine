Snippets for the query:  Q35
************************
Total Hits:  9
************************

************************
Document:  CACM-1974.html
************************
************************
Document:  CACM-2666.html
************************
************************
Document:  CACM-0586.html
************************
************************
Document:  CACM-0142.html
************************
************************
Document:  CACM-1138.html
************************
************************
Document:  CACM-3191.html
************************
************************
Document:  CACM-2889.html
************************
************************
Document:  CACM-1442.html
************************
************************
Document:  CACM-1469.html
************************
************************
Document:  CACM-0460.html
************************
************************
Document:  CACM-1090.html
************************
************************
Document:  CACM-1439.html
************************
************************
Document:  CACM-1179.html
************************


pufft-the purdue university fast fortran translator

a core resident, compile-and-go system designed
for the ibm 7090/7094 computer is described. 
 in little more than half of the 32k word core memory
pufft provides a monitor for job sequencing, a 
translator for the full fortran iv language, the fortran
subroutine 
************************

************************
Document:  CACM-2352.html
************************
************************
Document:  CACM-2676.html
************************
************************
Document:  CACM-0672.html
************************
************************
Document:  CACM-1046.html
************************
************************
Document:  CACM-0021.html
************************
************************
Document:  CACM-2639.html
************************
************************
Document:  CACM-1453.html
************************


a nonrecursive method of syntax specification

the use of the kleene regular expression notation
for describing algebraic language syntax, 
in particular of algol, is described in this paper. 
a fortran ii computer program for carrying out the 
elimination algorithm of gorn,similar to gaussian elimination
for linear systems of algebraic equations, 
is described.  this was applied to numerous smaller
languages, including some sublanguage of algol.  
a hand calculation result of the application of the algorithm
to all of algol is given, thus expressing 
the revised algol 1960 syntax in completely nonrecursive
terms, as far as its context-free portion is 
concerned. 
************************

************************
Document:  CACM-0963.html
************************
************************
Document:  CACM-0076.html
************************
************************
Document:  CACM-3124.html
************************
************************
Document:  CACM-0475.html
************************
************************
Document:  CACM-0582.html
************************
************************
Document:  CACM-0516.html
************************
************************
Document:  CACM-1235.html
************************


a stochastic approach to the grammatical coding of english

a computer program is described which will
assign each word in an english text to its form 
class or part of speech.  the program operates at relatively
high speed in only a limited storage space. 
 about half of the word-events in a corpus are identified
through the use of a small dictionary of function 
words and frequently occurring lexical words.  some suffix
tests and logical-decision rules are employed 
to code additional words.  finally, the remaining words
are assigned to one class or another on the basis 
of the most probable form classes to occur within the already
identified contexts.  the conditional probabilities 
used as a basis for this coding were empirically derived
from a separate hand-coded corpusn preliminary 
trials, the accuracy of the coder was 91% to 93%, with
obvious ways of improving the algorithm being 
suggested by 
************************

************************
Document:  CACM-2573.html
************************
************************
Document:  CACM-3144.html
************************
************************
Document:  CACM-1390.html
************************
************************
Document:  CACM-0895.html
************************
************************
Document:  CACM-1996.html
************************
************************
Document:  CACM-1008.html
************************
************************
Document:  CACM-0430.html
************************
************************
Document:  CACM-0810.html
************************
************************
Document:  CACM-1244.html
************************
************************
Document:  CACM-0275.html
************************
************************
Document:  CACM-2306.html
************************
************************
Document:  CACM-2842.html
************************
************************
Document:  CACM-2219.html
************************
************************
Document:  CACM-1297.html
************************
************************
Document:  CACM-1256.html
************************
************************
Document:  CACM-3137.html
************************
************************
Document:  CACM-1425.html
************************
************************
Document:  CACM-0434.html
************************
************************
Document:  CACM-0150.html
************************
************************
Document:  CACM-0584.html
************************


report on the algorithmic language fortran ii

cacm june, 
************************

************************
Document:  CACM-1283.html
************************
************************
Document:  CACM-2119.html
************************
************************
Document:  CACM-1754.html
************************
************************
Document:  CACM-0015.html
************************
************************
Document:  CACM-0469.html
************************
************************
Document:  CACM-0030.html
************************
************************
Document:  CACM-1230.html
************************
************************
Document:  CACM-3118.html
************************
************************
Document:  CACM-0118.html
************************
************************
Document:  CACM-0306.html
************************
************************
Document:  CACM-0248.html
************************
************************
Document:  CACM-1415.html
************************
************************
Document:  CACM-0612.html
************************
************************
Document:  CACM-2651.html
************************


the treatment of data types in el1

in constructing a general purpose programming
language, a key issue is providing a sufficient 
set of data types and associated operations in a manner
that permits both natural problem-oriented notation 
and efficient implementation.  the el1 language contains
a number of features specifically designed to 
simultaneously satisfy both requirements.  the resulting
treatment of data types includes provision for 
programmer-defined data types data types and generic
routines, programmer control over type conversion, 
and very flexible data type behavior, in a context that
allows efficient 
************************

************************
Document:  CACM-2691.html
************************
************************
Document:  CACM-0364.html
************************
************************
Document:  CACM-2925.html
************************


optimal surface reconstruction from planar contours

in many scientific and technical endeavors,
a three-dimensional solid must be reconstructed 
from serial sections, either to aid in the comprehension
of the object's structure or to facilitate its 
automatic manipulation and analysis.  this paper presents
a general solution to the problem of constructing 
a surface over a set of cross-sectional contours. 
this surface, to be composed of triangular tiles, 
is constructed by separately determining an optimal
surface between each pair of consecutive contours.
 determining such a surface is reduced to the problem
of finding certain minimum cost cycles in a directed 
toroidal graph.  a new fast algorithm for finding such
cycles 
************************

************************
Document:  CACM-0556.html
************************
************************
Document:  CACM-0591.html
************************
************************
Document:  CACM-1427.html
************************
************************
Document:  CACM-1801.html
************************
************************
Document:  CACM-2151.html
************************
************************
Document:  CACM-0026.html
************************
************************
Document:  CACM-1984.html
************************
************************
Document:  CACM-2374.html
************************
************************
Document:  CACM-0074.html
************************
************************
Document:  CACM-3134.html
************************
************************
Document:  CACM-2670.html
************************
************************
Document:  CACM-2758.html
************************
************************
Document:  CACM-1873.html
************************
************************
Document:  CACM-1497.html
************************
************************
Document:  CACM-1454.html
************************
************************
Document:  CACM-3002.html
************************
************************
Document:  CACM-2083.html
************************
************************
Document:  CACM-2349.html
************************
************************
Document:  CACM-1268.html
************************
************************
Document:  CACM-1104.html
************************
************************
Document:  CACM-1339.html
************************
************************
Document:  CACM-2307.html
************************
************************
Document:  CACM-0185.html
************************


multiprogram scheduling parts 1 and 2.  introduction and theory*

in order to exploit fully a fast computer which
possesses simultaneous processing abilities, 
it should to a large extent schedule its own workload.
 the scheduling routine must be capable of extremely 
rapid execution if it is not to prove self-defeating.
 the construction of a schedule entails determining 
which programs are to be run concurrently and which sequentially
with respect to each other.  a concise 
scheduling algorithm is described which tends 
************************

************************
Document:  CACM-1485.html
************************
************************
Document:  CACM-2087.html
************************
************************
Document:  CACM-1971.html
************************
************************
Document:  CACM-0035.html
************************
************************
Document:  CACM-2244.html
************************
************************
Document:  CACM-1614.html
************************


a proposal for definitions in algol

an extension to algol is proposed for adding
new data types and operators to the language. 
 definitions may occur in any block heading and terminate
with the block.  they are an integral part 
of the program and are not fixed in the language.  even
the behavior of existing operators may be redefined. 
 the processing of text containing defined contexts features
a "replacement 
************************

************************
Document:  CACM-1246.html
************************
************************
Document:  CACM-1655.html
************************
************************
Document:  CACM-0263.html
************************
************************
Document:  CACM-2919.html
************************
************************
Document:  CACM-1930.html
************************
************************
Document:  CACM-1847.html
************************


an algorithm for finding a fundamental set of cycles of a graph

a fast method is presented 
************************

************************
Document:  CACM-1879.html
************************
