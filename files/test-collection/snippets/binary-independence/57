Snippets for the query:  Q57
************************
Total Hits:  35
************************

************************
Document:  CACM-1974.html
************************
************************
Document:  CACM-2666.html
************************
************************
Document:  CACM-0586.html
************************
************************
Document:  CACM-0142.html
************************
************************
Document:  CACM-1138.html
************************
************************
Document:  CACM-3191.html
************************
************************
Document:  CACM-2889.html
************************
************************
Document:  CACM-1442.html
************************
************************
Document:  CACM-1469.html
************************


the next 700 programming languages 

a family of unimplemented computing languages
is described that is intended to span differences 
of application area by a unified framework.  this framework
dictates the rules about the uses of user-coined 
names, and the conventions about characterizing functional
relationships.  within this framework the 
design of a specific language 
************************

************************
Document:  CACM-0460.html
************************
************************
Document:  CACM-1090.html
************************
************************
Document:  CACM-1439.html
************************
************************
Document:  CACM-1179.html
************************


pufft-the purdue university fast fortran translator

a core resident, compile-and-go system designed
for the ibm 7090/7094 
************************

************************
Document:  CACM-2352.html
************************
************************
Document:  CACM-2676.html
************************
************************
Document:  CACM-0672.html
************************
************************
Document:  CACM-1046.html
************************


a compiler-building system developed by brooker and morris

in a number of articles published during the
past two years, r. a. brooker and d. morris (joined 
by j. rohl in their most recent paper have presented
a very interesting programming system 
************************

************************
Document:  CACM-0021.html
************************
************************
Document:  CACM-2639.html
************************
************************
Document:  CACM-1453.html
************************


a nonrecursive method of syntax specification

the use of the kleene regular expression notation
for describing algebraic language syntax, 
in particular of algol, is described in this paper. 
a fortran ii computer program for carrying out the 
elimination algorithm of gorn,similar to gaussian elimination
for linear systems of algebraic equations, 
************************

************************
Document:  CACM-0963.html
************************
************************
Document:  CACM-0076.html
************************
************************
Document:  CACM-3124.html
************************


recursive data structures in apl

a mathematical study of three approaches for defining nested
arrays in apl is presented.  theorems exhibiting the relationships
between the definitional systems are given and illustrated through graph
representations.  one of the approaches is used to define an
apl array to be a recursive data structure equivalent to a tree structure
in which all data is stored at the leaves as homogeneous
arrays of numbers and characters.  an extension of apl is proposed that
includes new primitive functions to manipulate the nesting
level of arrays and new operators to assist in the
construction of data-driven algorithms.  

cacm february, 1979

************************

************************
Document:  CACM-0475.html
************************
************************
Document:  CACM-0582.html
************************
************************
Document:  CACM-0516.html
************************
************************
Document:  CACM-1235.html
************************


a stochastic approach to the grammatical coding of english

a computer program is described which will
assign each word in an english text to its form 
class or part of speech.  the program operates at relatively
high speed in only a limited storage space. 
 about half of the word-events in a corpus are identified
through the use of a small dictionary of function 
words and frequently occurring lexical words.  some suffix
tests and logical-decision 
************************

************************
Document:  CACM-2573.html
************************
************************
Document:  CACM-3144.html
************************
************************
Document:  CACM-1390.html
************************
************************
Document:  CACM-0895.html
************************
************************
Document:  CACM-1996.html
************************


systems of hyperbolic pde $d3) (algorithm 392)

cacm september, 1970

smith, r. r.
mccall, d.

hyperbolic p.d.e., characteristic, extrapolation,
second order p.d.e., quasilinear p. d. e.

5.17

ca700909 
************************

************************
Document:  CACM-1008.html
************************
************************
Document:  CACM-0430.html
************************
************************
Document:  CACM-0810.html
************************
************************
Document:  CACM-1244.html
************************
************************
Document:  CACM-0275.html
************************
************************
Document:  CACM-2306.html
************************


ancient babylonian algorithms

the early origins of mathematics are discussed,
emphasizing those aspects which seem to be 
of greatest interest from the standpoint 
************************

************************
Document:  CACM-2842.html
************************
************************
Document:  CACM-2219.html
************************


a policy-driven scheduler for a time-sharing system

the service received by a process from a time-sharing
operating system can be characterized 
by a resource count sum{w[i]r[ij]} where r[ij] is the
number of units of service received by process 
i from resource i and w[i] is the cost per unit of the
service.  each class of users can be characterized 
by a policy function which specifies the amount of service
a user who belongs to this class should receive 
as a function of time.  priority changes dynamically
as a function of the difference between the service 
promised to the user by the policy function and the service
he actually receives.  a scheduling and swapping 
algorithm which keeps the resource count of each process
above its policy function will provide the specified 
level of service.  overhead can be reduced by avoiding
swaps of process which have received at least 
his level of service.  the algorithm has been implemented
in a general purpose operating system, and 
it has provided significantly better service 
************************

************************
Document:  CACM-1297.html
************************
************************
Document:  CACM-1256.html
************************
************************
Document:  CACM-3137.html
************************


a methodology for the design of distributed information systems

a macro model of a 
************************
s

a macro model of a distributed information system in presented.  the model
describes the major costs of using an information
system from the perspective of the end-user.  the making evident the effect of
various design and operating parameters 
************************
 and operating parameters on overall cost per transaction.
 the technique is illustrated by application to the design
of an interactive transaction processing system.

cacm april, 1979


************************
.

cacm april, 1979

bucci, g.
streeter, d.

distributed processing, system design, cost minimization, 
************************

************************
Document:  CACM-1425.html
************************
************************
Document:  CACM-0434.html
************************
************************
Document:  CACM-0150.html
************************
************************
Document:  CACM-0584.html
************************
************************
Document:  CACM-1283.html
************************
************************
Document:  CACM-2119.html
************************
************************
Document:  CACM-1754.html
************************


dynamic storage allocation systems

in many recent computer system designs, hardware
facilities 
************************
s, hardware
facilities have been provided for easing the 
problems of storage allocation.  a method of characterizing
dynamic storage allocation systems-according 
to the functional capabilities provided and the underlying

************************
 provided and the underlying
techniques used-is presented.  the basic purpose 
of the paper is to provide a useful perspective from
which the utility of various hardware facilities 
may be assessed.  a brief survey of storage allocation
facilities in several representative computer 
systems is included as an appendix.

cacm 
************************

************************
Document:  CACM-0015.html
************************
************************
Document:  CACM-0469.html
************************
************************
Document:  CACM-0030.html
************************
************************
Document:  CACM-1230.html
************************
************************
Document:  CACM-3118.html
************************
************************
Document:  CACM-0118.html
************************
************************
Document:  CACM-0306.html
************************
************************
Document:  CACM-0248.html
************************
************************
Document:  CACM-1415.html
************************


automatic derivation of microsentences

the decomposition of long complex english sentences
into shorter kernel-like constituent sentences 
(microsentences)has often been suggested as an avenue
toward conducting automatic retrieval of natural 
language messages.  to explore the prospects of such
a step, the authors attempted in 1963 to prepare 
a general program for deriving microsentences from longer
sentences that had been syntactically analyzed 
by the harvard multipath analysis program.  the basic
idea was to extract the subject, verb and object 
(if any) of each clause and to reassemble these materials
into a grammatical microsentence.  a program 
is described in this paper, which was designed to operate
on the 
************************

************************
Document:  CACM-0612.html
************************
************************
Document:  CACM-2651.html
************************


the treatment of data types in el1

in constructing a general purpose programming
language, a key issue is providing a sufficient 
set of data types and associated operations in a manner
that permits both natural problem-oriented notation 
and efficient implementation.  the el1 language contains
a number of features specifically designed to 
simultaneously 
************************

************************
Document:  CACM-2691.html
************************
************************
Document:  CACM-0364.html
************************
************************
Document:  CACM-2925.html
************************
************************
Document:  CACM-0556.html
************************
************************
Document:  CACM-0591.html
************************
************************
Document:  CACM-1427.html
************************
************************
Document:  CACM-1801.html
************************


analysis of variance for balanced experiments (algorithm 367 [g2])

cacm december, 1969

claringbold, p. j.

analysis of variance, analysis of covariance, regression
analysis, experimental design, balanced 
experiment, 
************************

************************
Document:  CACM-2151.html
************************
************************
Document:  CACM-0026.html
************************
************************
Document:  CACM-1984.html
************************
************************
Document:  CACM-2374.html
************************


a study of storage partitioning using a mathematical model of locality

both fixed and dynamic storage partitioning
procedures are examined for use in multiprogramming 
systems.  the storage requirement of programs is modeled
as a stationary gaussian process.  experiments 
justifying this model are described.  by means of this
model dynamic storage partitioning is shown to 
provide substantial increases in storage utilization
and operating efficiency over fixed partitioning. 

cacm march, 1972

coffman jr., e. g.
ryan jr., t. a.

storage partitioning, memory management, dynamic
storage allocation, space sharing, multiprogrammed 
storage, working-sets, program behavior models, mathematical modeling

************************

************************
Document:  CACM-0074.html
************************
************************
Document:  CACM-3134.html
************************


the use of normal multiplication tables
for information storage and retrieval

this paper describes a method for the organization and retrieval of attribute 
based information systems, using the normal multiplication table as a directory
for the information system.  algorithms for the organization 
************************
 for the organization an
d retrieval of information are described.  this method is particularly
suitable for queries requesting a group of information items,
 all of which possess a particular set of attributes (and possibly
some other attributes as well).  several examples are given; the
results with respect to the number of disk accesses and disk space
are compared to other common approaches.  algorithms evaluating
the appropriateness of the above approach to a given information system
are described.  for 
************************

************************
Document:  CACM-2670.html
************************


efficient implementation of a variable projection
algorithm for nonlinear least squares problems

nonlinear 
************************
 problems

nonlinear least squares frequently arise for 
************************
 frequently arise for which
the variables to be solved for can be separated 
into a linear and a nonlinear part.  a variable projection
algorithm has been developed recently which 
is designed to take advantage 
************************
ed to take advantage of the structure of a problem
whose variables separate in this way.  this 
paper gives a slightly more efficient and slightly more
general version of this algorithm than has appeared 
earlier.

cacm march, 1974

krogh, f. t.

nonlinear least squares, parameter estimation, 
************************

************************
Document:  CACM-2758.html
************************


a note on the lu factorization of a symmetric matrix

cacm may, 1975

evans, d. j.
hatzopoulos, m.

symmetric matrices, factorization, test matrices,
matrix inversion, separable systems

5.14

ca750509 jb 
************************

************************
Document:  CACM-1873.html
************************


accelerating lp algorithms

it is shown how a novel method for computing
(related) inner products can accelerate the pricing 
phase of lp algorithms.  other lp applications are indicated.

cacm july, 1969

fox, b. l.

linear programming, revised 
************************

************************
Document:  CACM-1497.html
************************
************************
Document:  CACM-1454.html
************************


a simple user-oriented compiler source language
for programming automatic test equipment

for the nonprogrammer, difficulty in using
a language increases rapidly with the number of 
nonproblem-oriented conventions.  a simple language, even
if inelegant, which considers the user's background 
as part of the problem may be more effective than a source
language containing subtle and more powerful 
capabilities.  the language described 
************************
.  the language described in this paper is
used to write computer programs which test electronic 
equipment.  because this testing process contains few
complex ideas, there is little need for the elegance 
and redundancy of a highly syntax-oriented language.
 a simple and direct language will suffice for the 
problem.  the eventual users of this language are military
depot personnel who cannot he expected to 
have computer programming skill or significant programming
training. 
************************

************************
Document:  CACM-3002.html
************************


a record and file partitioning model

one of the main objectives in the design of
a file system is the reduction of 
************************
 is the reduction of storage and data 
transfer costs.  this paper presents a model in which
several  requests access the file system, and each 
request requires information from one or more variable
length data-items.  the probabilities of access 
and the distribution of each data-item's length are assumed
to be known, and to be mutually independent. 
the file system uses one or more storage devices, and
each record may be partitioned into subrecords 
that are stored on different devices.  one of the subrecords
is designated as the primary record; 
************************
ated as the primary record; when 
a request for a record is made, the primary record is
first accessed, and other subrecords are accessed 
only if the pertinent information is not stored in the
primary record.  the model that is presented in 
this paper, both as a nonlinear programming model and
a mixed integer programming model, is a very general 
one; several types of file systems may be derived from
it by an appropriate selection of its parameters. 
 this model has already been used in the optimization of
library routines' storage at a large scale operating 
system.

cacm january, 1977

babad, j. m.

file system, file design, file partitioning, 
************************

************************
Document:  CACM-2083.html
************************
************************
Document:  CACM-2349.html
************************
************************
Document:  CACM-1268.html
************************
************************
Document:  CACM-1104.html
************************
************************
Document:  CACM-1339.html
************************
************************
Document:  CACM-2307.html
************************
************************
Document:  CACM-0185.html
************************
************************
Document:  CACM-1485.html
************************


the structure of programming languages

in this paper the major components of every
programming language are identified as: (1) the 
elementary program statement, (2) mechanisms for linking
elementary statements together, (3) the means 
by which a program can obtain data inputs.  several
alternative forms of each of these components are 
also described, compared and evaluated.  many examples,
frequently from list processing languages, illustrate 
the forms described.  the advantages, disadvantages and
factors influencing the choice of a form of component 
for a language are discussed, and the paper concludes
with the suggestion that programming languages 
evolve toward one which will permit all the most convenient
ways of structuring programs, organizing 
systems and referencing data.

************************

************************
Document:  CACM-2087.html
************************
************************
Document:  CACM-1971.html
************************
************************
Document:  CACM-0035.html
************************
************************
Document:  CACM-2244.html
************************
************************
Document:  CACM-1614.html
************************
************************
Document:  CACM-1246.html
************************
************************
Document:  CACM-1655.html
************************
************************
Document:  CACM-0263.html
************************
************************
Document:  CACM-2919.html
************************
************************
Document:  CACM-1930.html
************************
************************
Document:  CACM-1847.html
************************


an algorithm for finding a fundamental set of cycles of a graph

a fast method is presented for finding a fundamental
set of cycles for an undirected finite 
graph.  a spanning tree is grown and the vertices examined
in turn, unexamined vertices being stored 
in a pushdown list to await examination.  one stage
in the process is to take the top element v of the 
pushdown list and examine it, i.e. inspect all those
edges (v,z) of the graph for which z has not yet 
been examined.  if z is already in the tree, a fundamental
cycle is added; if not, the edge (v,z) is 
placed in the tree.  there is exactly one such stage
for each of the n vertices of the graph.  for large 
n, the store required in creases as n^2 and the time as
n^g where g depends on the type of graph involved. 
 g is bounded below by 2 and above by 3, and it is shown
that both bounds are attained.  in terms of 
storage our algorithm is similar to that of gotlieb and
corneil and superior to that of welch; in terms 
of speed it is similar to that of welch and superior
to that of gotlieb and corneil.  testsshow our 
algorithm to 
************************

************************
Document:  CACM-1879.html
************************
