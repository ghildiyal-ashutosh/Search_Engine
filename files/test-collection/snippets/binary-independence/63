Snippets for the query:  Q63
************************
Total Hits:  73
************************

************************
Document:  CACM-1974.html
************************


neater2: a pl/i source statement reformatter

neater2 accepts a pl/i source program and operates on it to produce
a reformatted version.  when in the logical mode, neater2 indicates
the logical structure of the source program in the indentation
pattern of its output.  logic errors discovered through neater2
logical analysis are discovered much more economically than is possible
through compilation and trial runs.  a number of options are
available to give the user full control over the output format and
to maximize the utility of neater2 as an aid during the early
stages of development of a pl/i source deck.  one option, usage, causes
neater2 to insert into each logical unit of coding a statement
which will case the number of times each one is executed to be recorded
during execution.  this feature is expected to provide a
major aid in optimization of pl/i programs.

cacm november, 1970

conrow, k.
smith, 
************************

************************
Document:  CACM-2666.html
************************
************************
Document:  CACM-0586.html
************************
************************
Document:  CACM-0142.html
************************
************************
Document:  CACM-1138.html
************************
************************
Document:  CACM-3191.html
************************


   generating permutations by nested cycling

   the purpose of this letter is two_fold: first to give due credit to the
tompkins-paige algorithm, and second to clarify a comment by hill, cr review
13891 on "programs for permutations".

cacm june, 1968

langdon, glen g.

permutations

************************

************************
Document:  CACM-2889.html
************************


performance of height-balanced trees

this paper presents the results of simulations
that investigate the performance of height-balanced 
(hb[k]) trees.  it is shown that the only statistic
of hb[1] trees (avl trees) that is a function of 
the size of the tree is the time to search for an item
in the tree.  for sufficiently large trees, the 
execution times of all procedures for maintaining hb[1]
trees are independent of the size of the tree. 
 in particular, an average of .465 restructures are required
per insertion, with an average of 2.78 nodes 
revisited to restore the hb[1] property; an average of
 .214 restructures are required per deletion, with 
an average 
************************
etion, with 
an average of 1.91 nodes revisited to restore the hb[1]
property.  moreover,the execution times of procedures 
for maintaining hb[k] trees, for k>1, are also independent
of the size of the tree except for the average 
number of nodes revisited on a delete operation in
order 
************************

************************
Document:  CACM-1442.html
************************
************************
Document:  CACM-1469.html
************************


the next 700 programming languages 

a family of unimplemented computing languages
is described that is intended to span differences 
of application area by a unified framework.  this framework
dictates the rules about the uses of user-coined 
names, and the conventions about characterizing functional
relationships.  within this framework the 
design of a specific language splits into two independent
parts.  one is the choice of written appearances 
of programs (or more generally, their physical representation).
 the other is the choice of the abstract 
entities (such as numbers, character-strings, lists
of them, functional 
************************
s
of them, functional relations among them) that can 
be referred to in the language.  the system is biased
towards "expressions" rather than "statements." 
 it includes a nonprocedural(purely functional) subsystem
that aims to expand the class of users' needs 
that can be met by a single print-instruction, without sacrificing
the important properties that make 
conventional right-hand-side expressions easy to construct and understand.

cacm march, 1966

landin, p. j.

ca660303 
************************

************************
Document:  CACM-0460.html
************************
************************
Document:  CACM-1090.html
************************
************************
Document:  CACM-1439.html
************************


mechanization of the curve fitting process: datan

a process for fitting a curve to approximate data
and the problem it creates for the engineer-programmer 
is defined.  an approach has also been defined and a system
has been written for the sru 1107 to mechanize 
a major portion of this process.  the techniques developed
to accomplish the 
************************
oped
to accomplish the mechanization are largely 
empirical, and are dependent for their information
only on the actual data points.

cacm april, 1966

simonsen, r. h.

************************
966

simonsen, r. h.
anketell, d. l.

ca660410 jb march 3, 1978  10:26 
************************

************************
Document:  CACM-1179.html
************************


pufft-the purdue university fast fortran translator

a core resident, compile-and-go system designed
for the ibm 7090/7094 computer is described. 
 in little more than half of the 32k word core memory
pufft provides a monitor for job sequencing, a 
translator for the full fortran iv language, the fortran
subroutine library, an input--output system 
for use at compile time and at execute time, and a rather
elaborate diagnostic message writing routine. 
 batches of small- and medium-sized fortran iv source
language programs are processed at very high speeds. 
 language compatibility has been maintained so that
programs may be debugged in the pufft system and 
then recompiled and run in the ibjob-ibftc system supplied by the manufacturer.

cacm november, 1965

rosen, s.
spurgeon, a.
donnelly, j. k.

ca651102 
************************
nelly, j. k.

ca651102 jb march 6, 1978 
************************

************************
Document:  CACM-2352.html
************************
************************
Document:  CACM-2676.html
************************
************************
Document:  CACM-0672.html
************************


recent developments affecting adp in tax administration

cacm december, 1963

leibowitz, g. j.

************************

************************
Document:  CACM-1046.html
************************


a compiler-building system developed by brooker and morris

in a number of articles published during the
past two years, r. a. brooker and d. morris (joined 
by j. rohl in their most recent paper have presented
a very interesting programming system that they 
have developed for the ferranti atlas computer.  the
present paper describes some of the major features 
of their system. it expands on some points that the original
authors cover briefly, and treats only very 
lightly some topics to which they devote considerable space.
 the purpose of this paper is purely expository. 
 except in some very small details, and in some comments,
it does not intentionally depart from or add 
to the material published in the listed references.

cacm july, 1964

rosen, s.

ca640701 
************************

************************
Document:  CACM-0021.html
************************
************************
Document:  CACM-2639.html
************************
************************
Document:  CACM-1453.html
************************


a nonrecursive method of syntax specification

the use of the kleene regular expression notation
for describing algebraic language syntax, 
in particular of algol, is described in this paper. 
a fortran ii computer program for carrying out the 
elimination algorithm of gorn,similar to gaussian elimination
for linear systems of algebraic equations, 
is described.  this was applied to numerous smaller
languages, including some sublanguage of algol.  
a hand calculation result of the application of the algorithm
to all of algol is given, thus expressing 
the revised algol 1960 syntax in completely 
************************
960 syntax in completely nonrecursive
terms, as far as its context-free portion is 
concerned.  this description in many ways is far more
intuitively understood than the previous recursive 
description, it is suggested.  the paper also includes
results of the machine program, which does not 
include a simplification algorithm.

cacm april, 1966

carr iii, j. w.

************************

************************
Document:  CACM-0963.html
************************


relative effects of central processor and input-output
speeds upon throughput on the large computer

presented in this paper is a technique for
determining the relative effects of the internal 
speed of the computer and the speed of the input-output
units upon the overall speed of the system. equations 
are derived which permit the determination of these
effects from hardware usage measurements.

cacm december, 1964

white, p.

ca641208 
************************

************************
Document:  CACM-0076.html
************************
************************
Document:  CACM-3124.html
************************


recursive data structures in apl

a mathematical study of three approaches for defining nested
arrays in apl is presented.  theorems exhibiting the relationships
between the definitional systems are given and illustrated through graph
representations.  one of the approaches is used to define an
apl array to be a recursive data structure equivalent to a tree structure
in which all data is stored at the leaves as homogeneous
arrays of numbers and characters.  an extension of apl is proposed that
includes new primitive functions to manipulate the nesting
level of arrays and new operators to assist in the
construction of data-driven algorithms.  

cacm february, 1979

gull,w.
jenkins, 
************************

************************
Document:  CACM-0475.html
************************
************************
Document:  CACM-0582.html
************************
************************
Document:  CACM-0516.html
************************
************************
Document:  CACM-1235.html
************************


a stochastic approach to the grammatical coding of english

a computer program is described which will
assign each word in an english text to its form 
class or part of speech.  the program operates at relatively
high speed in only a limited storage space. 
 about half of the word-events in a corpus are identified
through the use of a small dictionary of function 
words and frequently occurring lexical words.  some suffix
tests and logical-decision rules are employed 
to code additional words.  finally, the remaining words
are assigned to one class or another on the basis 
of the most probable form classes to occur within the already
identified contexts.  the conditional probabilities 
used as a basis for this coding were empirically derived
from a separate hand-coded corpusn preliminary 
trials, the accuracy of the coder was 91% to 93%, with
obvious 
************************

************************
Document:  CACM-2573.html
************************
************************
Document:  CACM-3144.html
************************


a model for and discussion of multi-interpreter systems

a multi-interpreter system is a system in which programs execute
by virtue of being interpreted by other programs, which themselves may
either be interpreted (i.e. nested interpreters) or run directly on
the host machine.  the model reveals the anatomy of interpreters
and how these differ from procedures, and exhibits links
to protection domains and multiprocessor architectures.

cacm may, 1979

manthey, m.

interpreters, 
************************

************************
Document:  CACM-1390.html
************************


convert

a programming language is described which
is applicable to problems conveniently described 
by transformation rules.  by this is meant that patterns
may be prescribed, each being associated with 
a skeleton, so that a series of such pairs may be searched
until a pattern is found which matches an 
expression to be transformed.  the conditions for a match
are governed by a code which also allows subexpressions 
to be identified and eventually substituted into the
corresponding skeleton.  the primitive patterns 
and primitive skeletons are described, as well as the
principle which allow their elaboration in to more 
complicated patterns and skeletons.  the advantages of the
language are that it allows one to apply transformation 
rules to lists and arrays as easily as strings, that both
patterns and skeletons may be defined recursively, 
and that as a consequence programs may be stated quite concisely.

cacm august, 1966

guzman, a.
mcintosh, 
************************

************************
Document:  CACM-0895.html
************************


a computational extension of the variate difference method

presented here is a computational extension
of the variate difference method as developed by 
g. tintner [1].

cacm march, 1963

************************

************************
Document:  CACM-1996.html
************************
************************
Document:  CACM-1008.html
************************


scheduling meetings with a computer

computer scheduling of papers as it was developed
for the 1960 meeting of the federation 
************************
960 meeting of the federation of 
american societies for experimental biology (faseb) is described.
 the faseb meeting is the largest scientific 
meeting held in the united states each year.  the technique
developed for faseb can be applied to schedule 
any meeting with parallel sessions.

cacm september, 1964

schultz, c. k.
brooks, 
************************

************************
Document:  CACM-0430.html
************************
************************
Document:  CACM-0810.html
************************


complex power (algorithm 190)

cacm july, 1963

relph, a. p.

ca630714 jb 
************************

************************
Document:  CACM-1244.html
************************
************************
Document:  CACM-0275.html
************************
************************
Document:  CACM-2306.html
************************
************************
Document:  CACM-2842.html
************************


the denotational semantics of programming languages

this paper is a tutorial introduction to the
theory of programming language semantics developed 
by d. scott and c. strachey.  the application of the theory
to formal language specification is demonstrated 
and other applications are surveyed. the first language
considered, loop, is very elementary and its 
definition merely introduces the notation and methodology
of the approach.  then the semantic concepts
of environments, stores, and continuations are introduced
to model classes of programming language features 
and the underlying mathematical theory of computation
due to scott is motivated and outlined.  finally, 
the paper presents a formal definition of the language gedanken.

cacm august, 1976

tennent, r. d.


************************

************************
Document:  CACM-2219.html
************************


a policy-driven scheduler for a time-sharing system

the service received by a process from a time-sharing
operating system can be characterized 
by a resource count sum{w[i]r[ij]} where r[ij] is the
number of units of service received by process 
i from resource i and w[i] is the cost per unit of the
service.  each class of users can be characterized 
by a policy function which specifies the amount of service
a user who belongs to this class should receive 
as a function of time.  priority changes dynamically
as a function of the difference between the service 
promised to the user by the policy function and the service
he actually receives.  a scheduling and swapping 
algorithm which keeps the resource count of each process
above its policy function will provide the specified 
level of service.  overhead can be reduced by avoiding
swaps of process which have received at least 
his level of service.  the algorithm has been implemented
in a general purpose operating system, and 
it has provided significantly better service to interactive
and to batch jobs than the previous scheduler.

cacm february, 1971

bernstein, a. j.

************************

************************
Document:  CACM-1297.html
************************
************************
Document:  CACM-1256.html
************************
************************
Document:  CACM-3137.html
************************


a methodology for the design of distributed information systems

a macro model of a distributed information system in presented.  the model
describes the major costs of using an information
system from the perspective of the end-user.  the making evident the effect of
various design and operating parameters on overall cost per transaction.
 the technique is illustrated by application to the design
of an interactive transaction processing system.

cacm april, 1979

bucci, g.
streeter, 
************************
979

bucci, g.
streeter, d.

distributed processing, system design, cost minimization, distributed
database, interactive computing, economic modeling, transaction processing

4.32 4.33 6.2 8.1

ca790403 dh may 21, 
************************

************************
Document:  CACM-1425.html
************************


flow diagrams, turing machines and
languages with only two formation rules

in the first part of the paper, flow diagrams
are introduced to represent inter al. mappings 
of a set into itself.  although not every diagram is
decomposable into a finite number of given base 
diagrams, this becomes true at a semantical level due
to a suitable extension of the given set and of 
the basic mappings defined in it.  two normalization
methods of flow diagrams are given.  the first has 
three base diagrams; the second, only two.  in the second
part of the paper, the second method is applied 
to the theory of turing machines.  with every turing
machine provided with a two-way half-tape, there 
is associated a similar machine, doing essentially
the same job, but working on a tape obtained from 
the first one by interspersing alternate blank squares.
 the new machine belongs to the family, elsewhere 
introduced, generated by composition and iteration from
the two machines l and r.  that family is a proper 
subfamily of the whole family of turing machines.

cacm may, 1966

bohm, c.
jacopini, 
************************

************************
Document:  CACM-0434.html
************************
************************
Document:  CACM-0150.html
************************
************************
Document:  CACM-0584.html
************************
************************
Document:  CACM-1283.html
************************
************************
Document:  CACM-2119.html
************************
************************
Document:  CACM-1754.html
************************


dynamic storage allocation systems

in many recent computer system designs, hardware
facilities have been provided for easing the 
problems of storage allocation.  a method of characterizing
dynamic storage allocation systems-according 
to the functional capabilities provided and the underlying
techniques used-is presented.  the basic purpose 
of the paper is to provide a useful perspective from
which the utility of various hardware facilities 
may be assessed.  a brief survey of storage allocation
facilities in several representative computer 
systems is included as an appendix.

cacm may, 1968

randell, b.
kuehner, c. j.

************************

************************
Document:  CACM-0015.html
************************
************************
Document:  CACM-0469.html
************************


critical path scheduling (algorithm 40)

cacm october, 1962

hellberg, l.

ca621011 jb 
************************

************************
Document:  CACM-0030.html
************************
************************
Document:  CACM-1230.html
************************
************************
Document:  CACM-3118.html
************************
************************
Document:  CACM-0118.html
************************
************************
Document:  CACM-0306.html
************************
************************
Document:  CACM-0248.html
************************


what is proprietary in mathematical programming?-impressions
of a panel discussion

a panel discussion on "what is proprietary
in mathematical programming?" was sponsored by the 
special interest committee on mathematical programming
of the acm during a hall of discussion/on september 
7th at the 16th national acm meeting 
************************
6th national acm meeting in los angeles.  this
note consists solely of the impressions garnered 
by the moderator of the panel and does not necessarily
represent the position of any of the panelists 
or other participants in the discussion.

cacm december, 1961

smith, l. w.

ca611202 
************************

************************
Document:  CACM-1415.html
************************


automatic derivation of microsentences

the decomposition of long complex english sentences
into shorter kernel-like constituent sentences 
(microsentences)has often been suggested as an avenue
toward conducting automatic retrieval of natural 
language messages.  to explore the prospects of such
a step, the authors attempted in 1963 to prepare 
a general 
************************
963 to prepare 
a general program for deriving microsentences from longer
sentences that had been syntactically analyzed 
by the harvard multipath analysis program.  the basic
idea was to extract the subject, verb and object 
(if any) of each clause and to reassemble these materials
into a grammatical microsentence.  a program 
is described in this paper, which was designed to operate
on the tree structure output of the analyzer, 
and the microsentences that were produced are exhibited.
 the authors conclude that while microsentences 
of the quality achieved do not open up immediate prospects
for improving the performance of automatic 
message retrieval systems, they may have practical
value in man-machine systems using human monitors 
to select the preferred syntactic interpretation of a sentence.

cacm june, 1966

carmody, b. t
jones 
************************

************************
Document:  CACM-0612.html
************************
************************
Document:  CACM-2651.html
************************


the treatment of data types in el1

in constructing a general 
************************


in constructing a general purpose programming
language, a key issue is providing a sufficient 
set of data types and associated operations in a manner
that permits both natural problem-oriented notation 
and efficient implementation.  the el1 language contains
a 
************************

************************
Document:  CACM-2691.html
************************


comments on the algorithms of verhelst for the
conversion of limited-entry decision tables to 
flowcharts

cacm january, 1974

king, p. j. h.
johnson, 
************************

************************
Document:  CACM-0364.html
************************
************************
Document:  CACM-2925.html
************************


optimal surface reconstruction from planar contours

in many scientific and technical endeavors,
a three-dimensional solid must be reconstructed 
from serial sections, either to aid in the comprehension
of the object's structure or to facilitate its 
automatic manipulation and analysis.  this paper presents
a general solution to the problem of constructing 
a surface over a set of cross-sectional contours. 
this surface, to be composed of triangular tiles, 
is constructed by separately determining an optimal
surface between each pair of consecutive contours.
 determining such a surface is reduced to the problem
of finding certain minimum cost cycles in a directed 
toroidal graph.  a new fast algorithm for finding such
cycles is utilized.  also developed is a closed-form 
expression, in term of the number of contour poin ts, for
an upper bound on the number of operations required 
to execute the algorithm.  an illustrated example which
involves the construction of a minimum area surface 
describing a human head is included.

cacm october, 1977

fuchs, h.
kedem,z. 
************************
977

fuchs, h.
kedem,z. m.
uselton, s. p.

surface reconstruction, contour data, serial sections,
three-dimensional computer graphics, minimum 
cost paths, continuous tone displays

5.25 5.32 8.2

ca771001 jb december 27, 1977 
************************

************************
Document:  CACM-0556.html
************************
************************
Document:  CACM-0591.html
************************


evaluation of asymptotic expression for the
fresnel sine and cosine integrals (algorithm 88)

cacm may, 1962

cundiff, j. l.


************************

************************
Document:  CACM-1427.html
************************


simulation of radioisotope scans by computer

in radioisotope scanning, a field which is assuming
increasing importance in medical diagnosis, 
the scan is a two-dimensional pattern made up of dots.
 areas of increased source activity are represented 
on the scan by areas of increased dot density.  to study
the output of scanners with various characteristics, 
a program which simulates radioisotope scans has been
written  for a pdp-1 computer with auxiliary 
************************

************************
Document:  CACM-1801.html
************************
************************
Document:  CACM-2151.html
************************
************************
Document:  CACM-0026.html
************************
************************
Document:  CACM-1984.html
************************


tableless date conversion $z) (algorithm 398)

cacm october, 1970

stone, r. a.

date, 
************************

************************
Document:  CACM-2374.html
************************


a study of storage partitioning using a mathematical model of locality

both fixed and dynamic storage partitioning
procedures are examined for use in multiprogramming 
systems.  the storage requirement of programs is modeled
as a stationary gaussian process.  experiments 
justifying this model are described.  by means of this
model dynamic storage partitioning is shown to 
provide substantial increases in storage utilization
and operating efficiency over fixed partitioning. 

cacm march, 1972

coffman jr., e. 
************************
972

coffman jr., e. g.
ryan jr., t. a.

storage partitioning, memory management, dynamic
storage allocation, space sharing, multiprogrammed 
storage, working-sets, program behavior models, mathematical modeling

4.32 4.39

ca720307 jb january 31, 1978  2:29 pm

1892	4	2374

************************

************************
Document:  CACM-0074.html
************************


a high-speed sorting procedure

cacm july, 1959

shell, d. l.

ca590704 jb 
************************

************************
Document:  CACM-3134.html
************************


the use of normal multiplication tables
for information storage and retrieval

this paper describes a method for the organization and retrieval of attribute 
based information systems, using the normal multiplication table as a directory
for the information system.  algorithms for the organization an
d retrieval of information are described.  this method is particularly
suitable for queries requesting a group of information items,
 all of which possess a particular set of attributes (and possibly
some other attributes as well).  several examples are given; the
results with respect to the number of disk accesses and disk space
are compared to other common approaches.  algorithms evaluating
the appropriateness of the above approach to a given information system
are described.  for a certain class of information systems,
the normal multiplication table method yields far more rapid retrieval
with a more economical space requirement than conventional systems.  
moreover this method incorporates an improved modification of the inverted 
file technique.

cacm march, 1979

motzkin, d.

information retrieval, inverted files, multiattribute retrieval,
multilist file, normal multiplication 
************************

************************
Document:  CACM-2670.html
************************


efficient implementation of a variable projection
algorithm for nonlinear least squares problems

nonlinear least squares frequently arise for which
the variables to be solved for can be separated 
into a linear and a nonlinear part.  a variable projection
algorithm has been developed recently which 
is designed to take advantage of the structure of a problem
whose variables separate in this way.  this 
paper gives a slightly more efficient and slightly more
general version of this algorithm than has appeared 
earlier.

cacm march, 1974

krogh, f. t.

nonlinear 
************************

************************
Document:  CACM-2758.html
************************
************************
Document:  CACM-1873.html
************************


accelerating lp algorithms

it is shown how a novel method for computing
(related) inner products can accelerate the pricing 
phase of lp algorithms.  other lp applications are indicated.

cacm july, 1969

fox, b. l.

linear 
************************

************************
Document:  CACM-1497.html
************************


on the normalization requirement of
divisor in divide- and- correct methods

this paper presents an analysis on the normalization
requirement of the divisor in a divide-and-correct 
method.  this analysis is made subject to the condition
that not more than one correction is required 
to obtain the true quotient character, from the trial
estimate got from the division of a two-precision 
segment of every partial remainder by a suitably rounded
single-precision divisor.  (this segmented division 
is denoted here as a (2, 1) precision basic division.)
 it is found that the normalization requirement 
could be narrowed down to a smaller range of divisors,
provided the magnitude of the character next to 
the leading character of the divisor is known.  if,
however, the normalization is to be eliminated one 
has to 
************************
iminated one 
has to choose proper higher precision segments of operands
for the basic division.  also considered is 
the possibility of eliminating the normalization by an
increase on the number of corrections on the quotient 
estimate got from a (2, 1) precision basic division.

************************

************************
Document:  CACM-1454.html
************************


a simple user-oriented compiler source language
for programming automatic test equipment

for the nonprogrammer, difficulty in using
a language increases rapidly with the number of 
nonproblem-oriented conventions.  a simple language, even
if inelegant, which considers the user's background 
as part of the problem may be more effective than a source
language containing subtle and more powerful 
capabilities.  the language described in this paper is
used to write computer programs which test electronic 
equipment.  because this testing process contains few
complex ideas, there is little need for the elegance 
and redundancy of a highly syntax-oriented language.
 a simple and direct language will suffice for the 
problem.  the eventual users of this language are military
depot personnel who cannot he expected to 
have computer programming skill or significant programming
training.  for this nonprogramming-oriented 
user, it was essential to create a language using familiar
engineering statements; programming-oriented 
conventions would have unnecessarily complicated his task.

cacm april, 1966

scheff, b. h.

ca660401 
************************

************************
Document:  CACM-3002.html
************************


a record and file partitioning model

one of the main objectives in the design of
a file system is the reduction of storage and data 
transfer costs.  this paper presents a model in which
several  requests access the file system, and each 
request requires information from one or more variable
length data-items.  the probabilities of access 
and the distribution of each data-item's length are assumed
to be known, and to be mutually independent. 
the file system uses one or more storage devices, and
each record may be partitioned into subrecords 
that are stored on different devices.  one of the subrecords
is designated as the primary record; when 
a request for a record is made, the primary record is
first accessed, and other subrecords are accessed 
only if the pertinent information is not stored in the
primary record.  the model that is presented in 
this paper, both as a nonlinear programming model and
a mixed integer programming model, is a very general 
one; several types of file systems may be derived from
it by an appropriate selection of its parameters. 
 this model has already been used in the optimization of
library routines' storage at a large scale operating 
system.

cacm january, 1977

babad, j. m.

file 
************************

************************
Document:  CACM-2083.html
************************


creation and control of internal data bases
under a fortran programming environment

a method is described for the definition of a user's common structure
and the automatic generation of the necessary common, dimension, equivalence,
and type declarations for each of the user's routines.  the definition
for the common is contained in an easy to modify form, thus
allowing the control of general communications of data between routines.
the described system has been implemented on the ibm 7094,
cdc 6000 series, and the ibm 360.  the method has proved to be invaluable
for the definition and control of common in many large-scale programs.

cacm april, 1970

desalvio, a. j.

************************

************************
Document:  CACM-2349.html
************************


generation of random correlated normal variables [g5] (algorithm a425)

cacm may, 1972

hurst, r. l.
knop, 
************************

************************
Document:  CACM-1268.html
************************
************************
Document:  CACM-1104.html
************************
************************
Document:  CACM-1339.html
************************


a contribution to the development of algol

cacm december, 1966

wirth, n.
hoare, 
************************

************************
Document:  CACM-2307.html
************************
************************
Document:  CACM-0185.html
************************


multiprogram scheduling parts 1 and 2.  introduction and theory*

in order to exploit fully a fast computer which
possesses simultaneous processing abilities, 
it should to a large extent schedule its own workload.
 the scheduling routine must be capable of extremely 
rapid execution if 
************************
y 
rapid execution if it is not to prove self-defeating.
 the construction of a schedule entails determining 
which programs are to be run concurrently and which sequentially
with respect to each other.  a concise 
scheduling algorithm is described which tends to minimize
the time for executing the entire pending workload 
(or any subset of it), subject to external constraints
such as precedence, urgency, etc.  the algorithm 
is applicable to a wide class of machines.

cacm june, 1960

codd, e. f.

ca600605 
************************

************************
Document:  CACM-1485.html
************************


the structure of programming languages

in this paper the major components of every
programming language are identified as: (1) the 
elementary program statement, 
************************
ementary program statement, (2) mechanisms for linking
elementary statements together, (3) the means 
by which a program can obtain data inputs.  several
alternative forms of each of these components are 
also described, compared and evaluated.  many examples,
frequently from list processing languages, illustrate 
the forms described.  the advantages, disadvantages and
factors influencing the choice of a form of component 
for a language are discussed, and the paper concludes
with the suggestion that programming languages 
evolve toward one which will permit all the most convenient
ways of structuring programs, organizing 
systems and referencing data.

cacm february, 1966

raphael, b.

ca660202 
************************
966

raphael, b.

ca660202 jb march 3, 1978  3:46 pm

1024	4	1485

************************

************************
Document:  CACM-2087.html
************************
************************
Document:  CACM-1971.html
************************
************************
Document:  CACM-0035.html
************************
************************
Document:  CACM-2244.html
************************
************************
Document:  CACM-1614.html
************************


a proposal for definitions in algol

an extension to algol is proposed for adding
new data types and operators to the language. 
 definitions may occur in any block heading and terminate
with the block.  they are an integral part 
of the program and are not fixed in the language.  even
the behavior of existing operators may be redefined. 
 the processing of text containing defined contexts features
a "replacement rule" that eliminates unnecessary 
iterations and temporary storage.  examples of definition sets
are given for real and complex matrices, 
complex numbers, file processing, and list manipulation.

cacm april, 1967

galler, b. a.
perlis, 
************************

************************
Document:  CACM-1246.html
************************
************************
Document:  CACM-1655.html
************************
************************
Document:  CACM-0263.html
************************


library loading with alternate routine selection

cacm november, 1961

moore, d. p.

ca611105 
************************

************************
Document:  CACM-2919.html
************************


the programmer's workbench-a machine for software development

on almost all software development projects the
assumption is made that the program development 
function will be done on the same machine 
************************
e on the same machine on which the
eventual system will run.  it is only when this 
production machine is unavailable or when its programming
environment is totally inadequate that alternatives 
are considered.  in this paper it is suggested that
there are many other situations where it would be 
advantageous to separate the program development and
main tenance function onto a specialized computer 
which is dedicated to that purpose.  such a computer
is here called a programmer's workbench.  the four 
basic sections of the paper in troduce the subject,outline
the general concept, discuss areas where such 
an approach may prove beneficial, and describe
an operational system utilizing this concept.

cacm october, 1977

ivie, e. l.

computer 
************************
977

ivie, e. l.

computer configurations, computer networks, software
development, software engineering, software 
main tenance, unix

3.2 3.5 3.7 3.8 4.0

ca771007 jb december 27, 1977 
************************

************************
Document:  CACM-1930.html
************************


extremely portable random number generator

extremely portable subroutines are sometimes
needed for which moderate quality and efficiency 
suffice.  typically, this occurs for library functions
(like random number generation and in core sorting) 
which are not entirely universal or are not used in a
standardized way.  the literature on random number 
generators does not seem to contain an algorithm that
meets requirements of this sort.  an extremely 
portable 8-line fortran program is provided which based
on an important paper by coveyou and macpherson 
(1967)sing their methods, 
************************
967)sing their methods, fourier analysis is applied
to the probability function for the consecutive 
n-tuples provided by our generator (with n less than
or equal to 4).  while the small modulus which must 
be used to maintain portability prevents the quality
of the generator from being high, the generator 
compares well with the bounds established in the above mentioned paper.

cacm february, 1969

kruskal, j. b.


************************

************************
Document:  CACM-1847.html
************************


an algorithm for finding a fundamental set of cycles of a graph

a fast method is presented for finding a fundamental
set of cycles for an undirected finite 
graph.  a spanning tree is grown and the vertices examined
in turn, unexamined vertices being stored 
in a pushdown list to await examination.  one stage
in the process is to take the top element v of the 
pushdown 
************************
ement v of the 
pushdown list and examine it, i.e. inspect all those
edges (v,z) of the graph for which z has not yet 
been examined.  if z is already in the tree, a fundamental
cycle is added; if not, the edge (v,z) is 
placed in the tree.  there is exactly one such stage
for each of the n vertices of the graph.  for large 
n, the store required in creases as n^2 and the time as
n^g where g depends on the type of graph involved. 
 g is bounded below by 2 and above by 
************************
ow by 2 and above by 3, and it is shown
that both bounds are attained.  in terms of 
storage our algorithm is similar to that of gotlieb and
corneil and superior to that of welch; in terms 
of speed it is similar to that of welch and superior
to that of gotlieb and corneil.  testsshow our 
algorithm to be remarkably efficient (g=2) on random graphs.

cacm september, 1969

paton, k.

fundamental 
************************

************************
Document:  CACM-1879.html
************************


a note on storage fragmentation and program segmentation

the main purpose of this paper is the presentation
of some of the results of a series of simulation 
experiments investigating the phenomenon of storage fragmentation.
 two different types of storage fragmentation 
are distinguished: (1) external fragmentation, namely the
loss in storage 
************************
y the
loss in storage utilization caused by the inability 
to make use of all available storage after it has been
fragmented into a large number of separate blocks; 
and (2) internal fragmentation, the loss of utilization
caused by rounding up a request for storage, 
rather than allocating only the exact number of words required.
 the most striking result is the apparently 
general rule that rounding up requests for storage,
to reduce the number of different sizes of blocks 
coexisting in storage, causes more loss of storage
by increased internal fragmentation than is saved 
by decreased external fragmentation.  described also are
a method of segment allocation and an accompanying 
technique for segment addressing which take advantage
of the above result.  evidence is presented of 
possible advantages of the method over conventional paging techniques.

cacm july, 1969

randell, b.

storage allocation, 
************************

