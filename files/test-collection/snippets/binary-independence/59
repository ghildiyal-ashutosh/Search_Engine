Snippets for the query:  Q59
************************
Total Hits:  37
************************

************************
Document:  CACM-1974.html
************************
************************
Document:  CACM-2666.html
************************
************************
Document:  CACM-0586.html
************************
************************
Document:  CACM-0142.html
************************
************************
Document:  CACM-1138.html
************************
************************
Document:  CACM-3191.html
************************
************************
Document:  CACM-2889.html
************************


performance of height-balanced trees

this paper presents the results of simulations
that investigate the performance of height-balanced 
(hb[k]) trees.  it is shown that the only statistic
of hb[1] trees (avl trees) that is a function of 
the size of the tree is the time to search for an item
in the tree.  for sufficiently large trees, the 
execution times of all procedures for maintaining hb[1]
trees are independent of the size of the tree. 
 in particular, an average of .465 restructures are required
per insertion, with an average of 2.78 nodes 
revisited to restore the hb[1] property; an average of
 .214 restructures are required per deletion, with 
an average of 1.91 nodes revisited to restore the hb[1]
property.  moreover,the execution times of procedures 
for maintaining hb[k] trees, for k>1, are also independent
of the size of the tree except for the average 
number of nodes revisited on a delete operation in
order to restore the hb[k] property on trace back. 
 the cost of maintaining 
************************

************************
Document:  CACM-1442.html
************************
************************
Document:  CACM-1469.html
************************


the next 700 programming languages 

a family of unimplemented computing languages
is described that is intended to span differences 
of application area by a unified framework.  this framework
dictates the rules about the uses of user-coined 
names, and the conventions about characterizing functional
relationships.  within this framework the 
design of a specific language splits into two independent
parts.  one is the choice of written appearances 
of programs (or more generally, their physical representation).
 the other is the choice of the abstract 
entities (such as numbers, character-strings, lists
of them, functional relations among them) that can 
be referred to in the language.  the system is biased
towards "expressions" rather than "statements." 
 it includes a nonprocedural(purely functional) subsystem
that aims to expand the class 
************************

************************
Document:  CACM-0460.html
************************
************************
Document:  CACM-1090.html
************************
************************
Document:  CACM-1439.html
************************


mechanization of the curve fitting process: datan

a process for fitting a curve to approximate data
and the problem it creates for the engineer-programmer 
is defined.  an approach has also been defined and a system
has been written for the sru 1107 to mechanize 
a major portion of this process.  the techniques developed
to accomplish the mechanization are largely 
empirical, and are dependent for their information

************************

************************
Document:  CACM-1179.html
************************
************************
Document:  CACM-2352.html
************************
************************
Document:  CACM-2676.html
************************
************************
Document:  CACM-0672.html
************************
************************
Document:  CACM-1046.html
************************
************************
Document:  CACM-0021.html
************************
************************
Document:  CACM-2639.html
************************
************************
Document:  CACM-1453.html
************************


a nonrecursive method of syntax specification

the use of the kleene regular expression notation
for describing algebraic language syntax, 
in particular of algol, is described in this paper. 
a fortran ii computer program for carrying out the 
elimination algorithm of gorn,similar to gaussian elimination
for linear systems of algebraic equations, 
************************

************************
Document:  CACM-0963.html
************************


relative effects of central processor and input-output
speeds upon throughput on the large computer

presented in this paper is a technique for
determining the relative effects of the internal 
speed of the computer and the speed of the input-output
units upon the overall speed of the system. equations 
are derived which permit the determination of these
effects from hardware usage measurements.

************************

************************
Document:  CACM-0076.html
************************
************************
Document:  CACM-3124.html
************************


recursive data structures in apl

a mathematical study of three approaches for defining nested
arrays in apl is presented.  theorems exhibiting the relationships
between the definitional systems are given and illustrated 
************************

************************
Document:  CACM-0475.html
************************
************************
Document:  CACM-0582.html
************************
************************
Document:  CACM-0516.html
************************
************************
Document:  CACM-1235.html
************************
************************
Document:  CACM-2573.html
************************
************************
Document:  CACM-3144.html
************************


a model for and discussion of multi-interpreter systems

a multi-interpreter 
************************

************************
Document:  CACM-1390.html
************************
************************
Document:  CACM-0895.html
************************
************************
Document:  CACM-1996.html
************************


systems of hyperbolic pde $d3) 
************************

************************
Document:  CACM-1008.html
************************
************************
Document:  CACM-0430.html
************************
************************
Document:  CACM-0810.html
************************
************************
Document:  CACM-1244.html
************************
************************
Document:  CACM-0275.html
************************
************************
Document:  CACM-2306.html
************************
************************
Document:  CACM-2842.html
************************
************************
Document:  CACM-2219.html
************************
************************
Document:  CACM-1297.html
************************
************************
Document:  CACM-1256.html
************************
************************
Document:  CACM-3137.html
************************


a methodology for the design of distributed information systems

a macro model of a 
************************
s

a macro model of a distributed information system in presented.  the model
describes the major costs of using an information
system from the perspective of the end-user.  the making evident 
************************
-user.  the making evident the effect of
various design and operating parameters on overall cost per transaction.
 the technique is illustrated by application to the design
of an interactive transaction processing system.

cacm april, 1979

bucci, g.
streeter, d.

distributed processing, system design, cost minimization, distributed
database, interactive computing, 
************************

************************
Document:  CACM-1425.html
************************
************************
Document:  CACM-0434.html
************************
************************
Document:  CACM-0150.html
************************
************************
Document:  CACM-0584.html
************************
************************
Document:  CACM-1283.html
************************
************************
Document:  CACM-2119.html
************************
************************
Document:  CACM-1754.html
************************


dynamic storage allocation systems

in many recent computer system designs, hardware
facilities have been 
************************

facilities have been provided for easing the 
problems of storage allocation.  a method of characterizing
dynamic storage allocation systems-according 
to the functional 
************************
s-according 
to the functional capabilities provided and the underlying
techniques used-is presented.  the basic purpose 
of the paper is to provide a useful perspective from
which the utility of various hardware facilities 
may be assessed.  a brief survey of storage allocation
facilities in several representative computer 
systems is included as an appendix.

************************
s is included as an appendix.

cacm may, 1968

randell, b.
kuehner, c. j.

segmentation, paging, multiprogramming, storage
allocation, storage management, virtual memories, 

************************

************************
Document:  CACM-0015.html
************************
************************
Document:  CACM-0469.html
************************
************************
Document:  CACM-0030.html
************************
************************
Document:  CACM-1230.html
************************
************************
Document:  CACM-3118.html
************************
************************
Document:  CACM-0118.html
************************
************************
Document:  CACM-0306.html
************************
************************
Document:  CACM-0248.html
************************
************************
Document:  CACM-1415.html
************************


automatic derivation of microsentences

the decomposition of long complex english sentences
into shorter kernel-like constituent sentences 
(microsentences)has often been suggested as an avenue
toward conducting automatic retrieval of natural 
language messages.  to explore the prospects of such
a step, the authors attempted in 1963 to prepare 
a general program for deriving microsentences from longer
sentences that had been syntactically analyzed 
by the harvard multipath analysis program.  the basic
idea was to extract the subject, verb and object 
(if any) of each clause and to reassemble these materials
into a grammatical microsentence.  a program 
is described in this paper, which was designed to operate
on the tree structure output of the analyzer, 
and the microsentences that were produced are exhibited.
 the authors conclude that while microsentences 
of the quality achieved do not open up immediate prospects
for improving the performance of automatic 
message retrieval systems, they may have practical

************************
s, they may have practical
value in man-machine systems using human monitors 
************************

************************
Document:  CACM-0612.html
************************
************************
Document:  CACM-2651.html
************************
************************
Document:  CACM-2691.html
************************
************************
Document:  CACM-0364.html
************************
************************
Document:  CACM-2925.html
************************


optimal surface reconstruction from planar contours

in many scientific and technical endeavors,
a three-dimensional solid must be reconstructed 
from serial sections, either to aid in the comprehension
of the object's structure or to facilitate its 
automatic manipulation and analysis.  this paper presents
a general solution to the problem of constructing 
a surface over a set of cross-sectional contours. 
this surface, to be composed of triangular tiles, 
is constructed by separately determining an optimal
surface between each pair of consecutive contours.
 determining such a surface is reduced to the problem
of finding certain minimum cost cycles in a directed 
toroidal graph.  a new fast algorithm 
************************

************************
Document:  CACM-0556.html
************************
************************
Document:  CACM-0591.html
************************
************************
Document:  CACM-1427.html
************************


simulation of radioisotope scans by computer

in radioisotope scanning, a field which is assuming
increasing importance in medical diagnosis, 
the scan is a two-dimensional pattern made up of dots.
 areas of increased source activity are represented 
on the scan by areas of increased dot density.  to study
the output of scanners with various characteristics, 
a program which simulates radioisotope scans has been
written  for a pdp-1 computer with auxiliary disk 
storage and cathode ray tube display.  past and present
research using the output of the simulator has 
shown the flexibility of the system to be important.
 the 
************************

************************
Document:  CACM-1801.html
************************
************************
Document:  CACM-2151.html
************************


user program measurement in a time-shared environment

a general discussion of the measurement of
software systems is followed by a description 
************************
 is followed by a description of 
a hardware and software scheme for measuring 
************************
 scheme for measuring user programs
in a time-shared environment.  the tx-2 computer 
at mit lincoln laboratory was used for the implementation
of such a system and the characteristics of 
this implementation are reported.  a scenario showing
the system in use is presented.  finally, it is 
shown how other time-sharing systems may provide similar measuring facilities.

cacm october, 1971

nemeth, a. g.
rovner, p. d.

operating systems, multiprogramming systems, time-sharing
systems, software measurement, user program 
measurement, measurement technology, tx-2 computer,
virtual computers, performance improvement

************************

************************
Document:  CACM-0026.html
************************
************************
Document:  CACM-1984.html
************************
************************
Document:  CACM-2374.html
************************


a study of storage partitioning using a mathematical model of locality

both fixed and dynamic storage partitioning
procedures are examined for use in multiprogramming 
systems.  the storage requirement 
************************
s.  the storage requirement of programs is modeled
as a stationary gaussian process.  experiments 
justifying this model are described.  by means of this
model dynamic storage partitioning is shown to 
provide substantial increases in storage utilization
and operating efficiency over fixed partitioning. 

cacm march, 1972

coffman jr., e. g.
ryan jr., t. a.

storage partitioning, memory management, dynamic
storage allocation, space sharing, multiprogrammed 
storage, working-sets, program behavior models, mathematical modeling

************************

************************
Document:  CACM-0074.html
************************
************************
Document:  CACM-3134.html
************************


the use of normal multiplication tables
for information storage and retrieval

this paper describes a method for the organization and retrieval of attribute 
based information systems, using the normal multiplication 
************************
s, using the normal multiplication table as a directory
for the information system.  algorithms for the organization an
d retrieval of information are described.  this method is particularly
suitable for queries requesting a group of information items,
 all of which possess a particular set of attributes (and possibly
some other attributes as well).  several examples are given; the
results with respect to the number of disk accesses and disk space
are compared to other common approaches.  algorithms evaluating
the appropriateness of the above approach to a given information system
are described.  for a certain class of information systems,
the normal multiplication 
************************
,
the normal multiplication table method yields far more rapid retrieval
with a more economical space requirement than conventional systems.  
moreover this method 
************************

************************
Document:  CACM-2670.html
************************
************************
Document:  CACM-2758.html
************************


a note on the lu factorization of a symmetric matrix

cacm may, 1975

evans, d. j.
hatzopoulos, m.

symmetric matrices, factorization, test matrices,
matrix inversion, separable systems

5.14

ca750509 jb 
************************

************************
Document:  CACM-1873.html
************************
************************
Document:  CACM-1497.html
************************
************************
Document:  CACM-1454.html
************************


a simple user-oriented compiler source language
for programming automatic test equipment

for the nonprogrammer, difficulty in using
a language increases rapidly with the number of 
nonproblem-oriented conventions.  a simple language, even
if inelegant, which considers the user's background 
as part of the 
************************

************************
Document:  CACM-3002.html
************************


a record and file partitioning model

one of the main objectives in the design of
a file system is the reduction of storage and data 
transfer costs.  this paper presents a model in which
several  requests access the file system, and each 
request requires information from one or more variable
length data-items.  the probabilities of access 
and the distribution of each data-item's length are assumed
to be known, and to be mutually independent. 
the file system 
************************
ent. 
the file system uses one or more storage devices, and
each record may be partitioned into subrecords 
that are stored on different devices.  one of the subrecords
is designated as the primary record; when 
a request for a record is made, the primary record is
first accessed, and other subrecords are accessed 
only if the pertinent information is not stored in the
primary record.  the model that is presented in 
this paper, both as a nonlinear programming model and
a mixed integer programming model, is a very general 
one; several types of file systems may be derived from

************************

************************
Document:  CACM-2083.html
************************
************************
Document:  CACM-2349.html
************************
************************
Document:  CACM-1268.html
************************
************************
Document:  CACM-1104.html
************************
************************
Document:  CACM-1339.html
************************
************************
Document:  CACM-2307.html
************************


dynamic document processing

the current role of computers in automatic
document processing is briefly outlined, and some 
reasons are given why the early promise of library automation
and of the mechanization of documentation 
processes has not been fulfilled.  a new dynamic document
environment is then outlined in which clustered
files are searched and information is retrieved following
an interactive user-controlled search process. 
 methods are described for an automatic query modification
based on user needs, and for a continuous 
reorganization of the stored information as a function of
earlier file processing and of normal collection 
growth.  the proposed procedures provide powerful tools
for information retrieval and for the control 
of dynamic library collections in which new items
are continually added and old ones are retired.

cacm july, 1972

salton, g.

automatic indexing, automatic search and retrieval,
iterative searching, mechanized library processing, 
collection growth, collection retirement, feedback search

3.62 3.71 3.73 
************************

************************
Document:  CACM-0185.html
************************


multiprogram scheduling parts 1 and 2.  introduction and theory*

in order to exploit fully a fast computer which
possesses simultaneous processing abilities, 
it should to a large extent schedule its own workload.
 the scheduling routine must be capable of extremely 
rapid execution if it is not to prove self-defeating.
 the construction of a schedule entails determining 
which programs are to be run concurrently and which sequentially
with respect to each other.  a concise 
scheduling algorithm is described which tends to minimize
the time 
************************

************************
Document:  CACM-1485.html
************************


the structure of programming languages

in this paper the major components of every
programming language are identified as: (1) the 
elementary program statement, (2) mechanisms for linking
elementary statements together, (3) the means 
by which a program can obtain data inputs.  several
alternative forms of each of these components are 
also described, compared and evaluated.  many examples,
frequently from list processing languages, illustrate 
the forms described.  the advantages, disadvantages and
factors influencing the choice of a form of component 
for a language are discussed, and the paper concludes
with the suggestion that programming languages 
evolve toward one which will permit all the most convenient
ways of structuring programs, organizing 
systems and referencing data.

************************

************************
Document:  CACM-2087.html
************************
************************
Document:  CACM-1971.html
************************
************************
Document:  CACM-0035.html
************************
************************
Document:  CACM-2244.html
************************
************************
Document:  CACM-1614.html
************************
************************
Document:  CACM-1246.html
************************
************************
Document:  CACM-1655.html
************************
************************
Document:  CACM-0263.html
************************
************************
Document:  CACM-2919.html
************************


the programmer's workbench-a machine for software development

on almost all software development projects the
assumption is made that the program development 
function will be done on the same machine on which the
eventual system will run.  it is only when this 
production machine is unavailable or when its programming
environment is totally inadequate that alternatives 
************************
ly inadequate that alternatives 
are considered.  in this paper it is suggested that
there are many other situations where it would be 
advantageous to separate the program development and
main tenance function onto a specialized computer 
which is dedicated to that purpose.  such a computer
is here called a programmer's workbench.  the four 
basic sections of the paper in troduce the subject,outline
the general concept, discuss areas where such 
an approach may prove beneficial, and describe
an operational system utilizing this concept.

cacm october, 1977

ivie, e. l.

computer configurations, computer networks, software
development, software 
************************

************************
Document:  CACM-1930.html
************************
************************
Document:  CACM-1847.html
************************


an algorithm for finding a fundamental set of cycles of a graph

a fast method is presented for finding a fundamental
set of cycles for an undirected finite 
graph.  a spanning tree is grown and the vertices examined
in turn, unexamined vertices being stored 
in a pushdown list to await examination.  one stage
in the process is to take the top element v of the 
pushdown list and examine it, i.e. inspect all those
edges (v,z) of the graph for which z has not yet 
been examined.  if z is already in the tree, a fundamental
cycle is added; if not, the edge (v,z) is 
placed in the tree.  there is exactly one such stage
for each of the n vertices of the graph.  for large 
n, the store required in creases as n^2 and the time as
n^g where g depends on the type of graph 
************************

************************
Document:  CACM-1879.html
************************
