Snippets for the query:  Q38
************************
Total Hits:  137
************************

************************
Document:  CACM-3091.html
************************
************************
Document:  CACM-1213.html
************************


dynamic format specifications

the use and implementation of two new fortran
format conversions are discussed.  these format 
types give the fortran programmer 
************************

************************
Document:  CACM-1426.html
************************


a simulation of hospital admission policy

a study is described which simulates different
admission policies of a large specialized hospital. 
 the objective is to determine better policies for
stabilization of admission and census rates while 
maintaining a reasonably full hospital.  there types of
policies were examined: 
************************

************************
Document:  CACM-2603.html
************************
************************
Document:  CACM-1439.html
************************


mechanization of the curve fitting process: datan

a process for fitting a curve to approximate data
and the problem it creates for the engineer-programmer 
is defined.  an approach has also 
************************
.  an approach has also been defined and a system
has been written for the sru 1107 to mechanize 
a major portion of this process.  the techniques developed
to accomplish the mechanization are largely 
empirical, and are dependent for their information
only on the actual data points.

cacm april, 
************************

************************
Document:  CACM-0166.html
************************
************************
Document:  CACM-1852.html
************************
************************
Document:  CACM-3124.html
************************


recursive data structures in apl

a mathematical study of three approaches for defining nested
arrays in apl is presented.  theorems exhibiting the relationships
between the definitional systems are given and illustrated through graph
representations.  one of the approaches is used to define an
apl array to be a recursive data structure equivalent to a tree structure
in which all data is stored at the leaves as homogeneous
arrays of numbers and characters.  an extension of apl is proposed that
includes new primitive functions to manipulate the nesting
level of arrays and new operators to assist in the
construction 
************************

************************
Document:  CACM-3013.html
************************


some new methods of detecting step edges in digital pictures

this note describes two operators that respond
to step edges, but not to ramps.  the first 
is similar to the digital laplacian, but uses the max, rather
than the sum, of the x and y second differences. 
 the second uses the difference between the mean and
median gray levels 
************************

************************
Document:  CACM-2527.html
************************


implementation of high level language machine

computing machines which directly execute
the statements of a high level language have been 
proposed in the past.  this report describes the actual
implementation of such a machine: it is a computer 
whose "machine language" is apl.  the machine is fully
operational and correctly executes almost all 
of the apl operations on scalars, vectors, and arrays.
 the machine automatically allocates memory, executes 
statements, calls functions, converts numbers from one
type to another, checks subscripts, and automatically 
detects many types of programmer errors.

cacm april, 
************************

************************
Document:  CACM-1589.html
************************


dialog: a conversational programming system with a graphical orientation

dialog is an algebraic language for online
use with a graphical input-output console device. 
 it is a computational aid for the casual user, which
provides basic facilities for graphical and numeric 
input and display, online and off line program preparation
and storage, and hard copy presentation of 
results.  use of the system requires a minimum of experience
or instruction, since the growth of an overlaying 
system control language has been prevented, and there
are no processor-oriented statements, like variable 
type or dimension declarations.  moreover, in the online
situation the processor interacts with the graphical 
keyboard on a character-by-character basis so as to
restrict the programmer's choice of input symbols 
************************

************************
Document:  CACM-1431.html
************************


on a storage mapping function for data structures

some basic facts about certain data structures
are reviewed and an efficient algorithm is presented 
for constructing a storage mapping function for
a structure from the structure's definition.

cacm may, 1966

deuel, 
************************

************************
Document:  CACM-2873.html
************************


lg: a language for analytic geometry

a conversational programming language for analytic
geometry is described, together with some 
aspects of its implementation.  the language allows
the flexible definition of geometric objects 
************************
 of geometric objects and 
elements, computes their parameters, and displays the results.
it also provides the capability of specifying 
a geometric figure via a collection of parameters and
displaying various loci corresponding to these 
parameters. a third characteristic consists of the possibility
of using this language to design other 
user oriented languages.  lg has been specifically designed
for use by nonprogrammers; it is easy to 
learn 
************************

************************
Document:  CACM-2081.html
************************


some complete calculi for matrices

a matrix calculus is introduced with the intention of developing data structures
suitable for a high level algorithmic language for mathematical programming.  
the paper investigates how the special structure of matrices can be described
and utilized for efficient computing by saving memory space and
superfluous operations.  sequences of matrices (and sequences of sequences
of matrices) are considered, and matrix operators areext
ended to sequence operators and cumulative operators.  algorithms
are given which use symbol manipulation of matrix expressions so
as to find the forms best suited for computation.  these forms are
called normal forms.  several completeness results are obtained
in the sense that for each expression an equivalent expression
in normal form can be found within a specified calculus.

cacm april, 1970

bayer, r.
witzgall, c.

complete calculus, data structures, linear
programming, matrix, matrix concatenation,
matrix sequences, programming languages,
sequence operations, 
************************

************************
Document:  CACM-2814.html
************************
************************
Document:  CACM-2909.html
************************


what can we do about the unnecessary diversity
of notation for syntactic definitions?

cacm november, 1977

************************

************************
Document:  CACM-2699.html
************************


automatic data structure choice in a language of very high level

setl is a set-theoretically oriented language
of very high level whose repertoire of semantic 
objects includes finite sets, ordered n-tuples, and
sets of ordered n-tuples usable as mappings.  this 
paper describes the structure of an optimizer for this
language.  among other methods of interest, the 
optimizer uses techniques which allow relations of inclusion
and membership to be established, the domains 
and ranges of (tabulated) mappings to be estimated from
above and below, and the single-valuedness of 
(tabulated) mappings to be proved.  once facts of this
kind have been established, automatic choice of 
data structures becomes possible. the methods employed
are based upon, and extend, known techniques of 
data flow analysis.

cacm december, 1975

schwartz, j. t.

program optimization, automatic programming, high-level
languages, set-theoretic languages, 
************************
, set-theoretic languages, data 
structure choice

4.12 
************************

************************
Document:  CACM-1922.html
************************
************************
Document:  CACM-2937.html
************************


an experimental evaluation of data type conventions

the language 
************************
 conventions

the language in which programs are written
can have a substantial effect on the reliability 
of the resulting programs.  this paper discusses an experiment
that compares the programming reliability 
of subjects using a statically typed language and a "typeless"
language.  analysis of the number of errors 
and the number of runs containing errors shows that, at
least in one environment, the use of a statically 
typed language can increase programming reliability. 
detailed analysis of the errors made by the subjects 
in programming solutions to reasonably small problems
shows that the subjects had difficulty manipulating 
the representation of data.

cacm august, 1977

gannon, j. d.

data types, experimentation, language

************************

************************
Document:  CACM-1835.html
************************


the iitran programming language

the iitran language, developed to be used
by students, and its important important features 
are described. iitran is a procedure-oriented language
with a one-level block structure and a variety 
of data types.  several novel and 
************************

************************
Document:  CACM-1792.html
************************
************************
Document:  CACM-2627.html
************************
************************
Document:  CACM-2316.html
************************
************************
Document:  CACM-2264.html
************************


derived semantics for some programming language constructs

the constructs of a simple programming language
are introduced and described informally in 
terms of values and side-effects.  a translator is defined
which translates the language into flowcharts 
for a simple machine.  the action of the machine in executing
a flowchart is defined.  a proof is constructed 
that the effect of translating and executing any program
can be expressed solely in terms of the value 
and side-effect of the program.  during the course of
constructing the proof, formal definitions of the 
concepts of 
************************
 of the 
concepts of value and side-effect are derived in order
to make the proof rigorous.  correctness of the 
implementation involves checking that the definitions derived
in the step 
************************

************************
Document:  CACM-3031.html
************************


abstract data types and software validation

************************
s and software validation

a data abstraction can be naturally 
************************
ion can be naturally specified
using algebraic axioms.  the virtue of these 
axioms is that they permit a representation-independent
formal specification of a data type.  an example 
is given 
************************
.  an example 
is given which shows how to employ algebraic axioms at
successive levels of implementation.  the  major 
thrust of the paper is twofold.  first, it is shown how
the use of algebraic axiomatizations can simplify 
the process of proving the correctness of an implementation
of an abstract data type.  second, semi-automatic 
************************
.  second, semi-automatic 
tools are described which can be used both to automate
such proofs of correctness and to derive an immediate 
implementation from the axioms.  this implementation
allows for limited testing of programs at design 
time, before a conventional implementation is accomplished.

cacm december, 1978

guttag, j.
horowitz, e.
musser, d.

abstract data type, correctness proof,

************************
, correctness proof,
data type, data structure, specification 
************************

************************
Document:  CACM-2940.html
************************


abstraction and verification in alphard: defining
and specifying iteration and generators

the alphard "form" provides the programmer with
a great deal of control over the implementation 
of abstract data types.  in this paper the 
************************
s.  in this paper the abstraction techniques
are extended from simple data representation 
and function definition to the iteration statement, the
most important poin t of interaction between data 
and the control structure of the language itself.  a
means of specializing alphard's loops to operate 
on abstract entities without explicit dependence on the
representation of those entities is in troduced. 
 specification and verification techniques that allow
the properties of the generators for such iterations 
to be expressed in the form of proof rules are developed.
 results are obtained that for common special 
cases of these loops are essentially identical to the
corresponding constructs in other languages.  a 
means of showing that a generator will terminate is also provided.

cacm august, 1977

shaw, m.
wulf, w. a.

abstraction and representation, abstract data types,
assertions, control 
************************
,
assertions, control specialization, correctness, 
generators,invariants, iteration statements, modular
decomposition, program specifications, programming 
languages, programming methodology, proofs of correctness, types, verification

4.20 
************************

************************
Document:  CACM-2931.html
************************


logic and programming languages

logic has been long in terested in whether answers
to certain questions are computable in principle, 
since the outcome puts bounds on the possibilities of
formalization.  more recently, precise comparisons 
in the efficiency of decision methods have become available
through the developments in complexity theory. 
 these, however, are applications to logic, and a big question
is whether methods of logic have significance 
in the other direction for the more applied parts of
computability theory.  programming languages offer 
an obvious opportunity as their syntactic formalization
is well advanced; however, the semantical theory 
can hardly be said to be complete.  though we have
many examples, we have still to give wide-ranging 
mathematical answers to these queries:  what is a machine?
 what is a computable process?  how (or how 
well) does a machine simulate a process?  programs naturally
enter in giving descriptions of processes. 
 the definition of the precise meaning of a program
then requires us to explain what are the objects 
of computation (in a way, the statics of the problem)
and how they are to be transformed (the dynamics). 
 so far the theories of automata and of nets, though
most in teresting for dynamics, have formalized only 
a portion of the field, and there has been perhaps too
much concentration on the finite-state and algebraic 
aspects.  it would seem that the understanding of higher-level
program features involves us with infinite 
objects and forces us to pass through several levels
of explanation to go from the conceptual ideas to 
the final simulation on a real machine.  these levels
can be made mathematically exact if we can find 
the right abstractions to represent the necessary structures.
 the experience of many independent workers 
with the method of data types as lattices (or partial

************************
s as lattices (or partial
orderings) under an information content ordering, 
and with their continuous mappings, has demonstrated the
flexibility of this approach in providing definitions 
and proofs, which are 
************************
 
and proofs, which are clean and without undue dependence
on implementations.  nevertheless much remains 
to be done in showing how abstract conceptualizations
can (or cannot) be actualized before we can say 
we have a unified theory.

cacm september, 1977

scott, d. s.

logic, programming languages, automata, denotational

************************

************************
Document:  CACM-1098.html
************************


a comparison of list-processing computer languages
(including a detailed comparison of comit, 
ipl-v, lisp 1.5, and slip)

a detailed comparison is presented of comit,
ipl-v, lisp 1.5 and slip - four well-known computer 
programming languages which, among them, exhibit all the
principal characteristics of existing list-processing 
languages.  important common features of list-processing
languages are reviewed: forms of data structures 
which are manipulated, necessity for dynamic allocation
of storage, use of pushdown stores, and use of 
recursive operations.  principal differences between the
four languages under consideration are detailed: 
representations of data, both by the programmer and within
the machine; 
************************

************************
Document:  CACM-0630.html
************************


an evaluation of autocode readability

of the many requirements of an autocode, the
pair of requirements "easy to read" and "easy 
to write" are not often compatible.  this paper argues
that readability can be added automatically in 
the translation process so that the programmer can
enjoy the utmost economy of expression, while for 
management a full and valid cobol version is printed to give
all the advantages of readability and compatibility.

cacm march, 1962


************************

************************
Document:  CACM-2941.html
************************


early experience with mesa

the experiences of mesa's first users-primarily
its implementers-are discussed, and some implications 
for mesa and similar programming languages are suggested.
the specific topics addressed are: module structure 
and its use in defining abstractions, data-structuring
facilities in mesa, an equivalence algorithm for 
types and type coercions, 
************************
 and type coercions, the benefits of the type system
and why it is breached occasionally, and the 
difficulty of making the treatment of variant records safe.

cacm august, 1977

geschke, c. m.
morris, j. h. jr.
satterthwaite, e. h.

programming languages, types, modules,
data structures, 
************************

************************
Document:  CACM-0409.html
************************


cl-1, an environment for a compiler

a flexible, large-scale programming system to
facilitate the solution of information processing 
problems and to provide intercommunication between programs
and/or programmers has been developed and 
realized on the ibm 709/7090 computer.  the system is
based on a master file concept and has provisions 
for accepting, storing, and retrieving both descriptions
and instances of large and complex data sets, 
as well as algorithms defined on these data sets.  both
data and algorithms may be expressed in a family 
of command and descriptive languages.  the concept
of distinct 
************************

************************
Document:  CACM-3150.html
************************


beyond programming languages

as computer technology matures, our growing ability to create large systems is 
leading to basic changes in the nature of programming.  current programming 
language concepts will not be adequate for building and maintaining
systems of the complexity called for by the tasks we attempt.  just
as high level languages enabled the programmer to escape from the
intricacies of a machine's order code, higher level programming systems
can provide the means to understand and manipulate 
************************

************************
Document:  CACM-2956.html
************************


some ideas on data types in high-level languages

************************
s in high-level languages

a number of issues are explored concerning the
notion that a data type is a set of values together 
************************
 is a set of values together 
with a set of primitive operations on those values.  among
these are the need for a notation for iterating 
over the elements of any finite set (instead of the
more narrow for i:= 1 to n notation), the use of 
the domain of an array as a data type, the need for
a simple 
************************
, the need for
a simple notation for allowing types of parameters 
to be 
************************
 of parameters 
to be themselves parameters (but in a restrictive fashion),
and resulting problems with conversion of 
values from one type to another.

cacm june, 1977

gries, d.
gehani, n.

data types, generic procedures, 
************************

************************
Document:  CACM-2243.html
************************
************************
Document:  CACM-2661.html
************************
************************
Document:  CACM-1210.html
************************


file-handling within fortran

this note describes some fortran subroutines
to facilitate handling of tape files.  they allow 
symbolic naming of information files, without violating
the casual scientific programmer's idea of simplicity. 
************************

************************
Document:  CACM-2651.html
************************


the treatment of data types in el1

in constructing a general purpose programming
language, a key issue is providing a sufficient 
set of data types and associated operations in a manner
that permits both natural problem-oriented notation 
and efficient implementation.  the el1 language contains
a number of features specifically designed to 
simultaneously satisfy both requirements.  the resulting
treatment of data types includes provision for 
programmer-defined data types data types and generic
routines, programmer control over type conversion, 
and very flexible data type behavior, in a context that
allows efficient compiled code and compact data 
representation.

cacm may, 1974

wegbreit, b.

data types, modes, mode unions, type conversion,
coercion, generic functions, extensible languages, 
data type definition, data description language, 
************************

************************
Document:  CACM-0961.html
************************
************************
Document:  CACM-2877.html
************************


a program data flow analysis procedure

the global data relationships in a program
can be exposed and codified by the static analysis 
methods described in this paper.  a procedure is given
which determines all the definitions which can
possibly "reach" 
************************
 which can
possibly "reach" each node of the control flow graph
of the program and all the definitions that are 
"live" on 
************************

************************
Document:  CACM-1359.html
************************
************************
Document:  CACM-2051.html
************************


a pl/i program to assist the comparative linguist

a practical pl/i program is described which
can assist comparative linguists to determine
the regular sound correspondences between genetically related languages.
the investigator must arrange data for input by aligning pairs
of suspected cognates.  the program tabulates the correspondences,
and uses list processing techniques to sort and count them.
each pair of words is then assigned a relative value that is a function
of the total frequency in the data of each correspondence found
in that pair of words.  the output is a list of all correspondence
types with their frequency 
************************

************************
Document:  CACM-3071.html
************************


an algorithm using symbolic techniques for the
bel-petrov classification of gravitational fields

in this note, an algorithm is presented for the
symbolic calculation of certain algebraic invariants 
of the weyl tensor which permits the determination
of the bel-petrov types of a gravitational field. 
************************
 of a gravitational field. 
 this algorithm, although more specialized than that
of d'inverno and russell-clark, requires neither 
the use of a special coordinate system nor the spin coefficient
formalism.  the algorithm has been implemented 
in formac and is designed to complete the classification
scheme proposed by petrov in his book.  an appendix 
contains examples illustrating the use of the algorithm.

cacm september, 1978

harris, r.
zund, j.

general relativity, bel-petrov types,
formac, symbolic manipulation, 
************************

************************
Document:  CACM-2782.html
************************
************************
Document:  CACM-1861.html
************************


the mad definition facility

one of the first definition facilities for
higher level languages is described.  users of the 
language can define new operators and/or data types
into the mad language, 
************************
s
into the mad language, so that their use appears 
as if they were predefined.  information is given on
how one writes definitions, as well as on much 
************************
, as well as on much of 
the motivation behind the form in which definitions are
written. some conclusions 
************************
 are
written. some conclusions are drawn about future 
definitional facilities.

cacm august, 1969

arden, b. w.
galler, b. a.
graham, r. m.

mad, definitions, operators, macros, higher level 
************************

************************
Document:  CACM-2265.html
************************


a model for type checking

most current programming languages treat computation
over 
************************
 treat computation
over different classes of objects (e.g. 
numbers, strings, labels and functions).  for correct
compilation and execution, the following question 
then arises: is a program properly constructed so that
its operations and operands are compatible?  the 
activity of answering this question is usually called
type checking.  this paper attempts to isolate 
the notion of type checking and presents a partial
solution to the type checking problem based on the 
notions of abstraction and application of 
************************
ion and application of functions. 
in particular, a program is mapped into an expression 
within a decidable subset of the lambda calculus, which
characterizes the type relations within the program 
and eliminates all other information.  the determination
of the type-wise correctness or incorrectness 
of the program is resolved by reducing its corresponding
lambda calculus expression to one of two normal 
forms, the constant "correct" for a type-wise correct
program or the constant "error".  an application 
to type checking in algol 60 is made, and the attendant
problems faced for any notion of type checking 
are discussed.

cacm november, 1972

ledgard, h. f.

type checking, types, lambda calculus, models 
************************
, lambda calculus, models for
programming languages, syntax, semantics, compiler 
writing, language implementation, formal definition

4.12 4.22 5.2 5.21 
************************

************************
Document:  CACM-1457.html
************************


data manipulation and programming problems
in automatic information retrieval

automatic information retrieval programs require
the manipulation of a variety of different 
data structures, including linear text, sparse matrices,
and tree or list structures.  the main data 
manipulations to be performed in automatic information
systems are first briefly reviewed.  a variety 
of data representations which have been used to describe
structured information are then examined, and 
the characteristics of various processing languages are
outlined in the 
************************

************************
Document:  CACM-2254.html
************************


dynamic partitioning for array languages

the classical process of partitioning an array
into subarrays is extended to a more useful 
array language operation.  various modes of partitioning
are defined for different types of arrays, so 
that 
************************
s of arrays, so 
that subarrays may vary over the original array in
a nearly arbitrary manner.  these definitions are 
motivated with 
************************
 are 
motivated with several realistic examples to illustrate
the value of partitioning for array languages. 
 of general interest is the data structure for partitioning.

************************
 structure for partitioning.
 this consists of dynamic tree structures 
which are used to derive and maintain the array control
information.  these are described in sufficient 
detail to be of value in the design of other array languages.
 the description presented in this paper 
is implemented in a new array language, ol/2, currently
under development at the university of illinois.

cacm december, 1972

phillips, j. r.
adams, h. c.

dynamic partitioning, array partitioning array language,
data structure, tree structure, 
************************

************************
Document:  CACM-2958.html
************************


abstract data types and the development 
************************
s and the development of data structures

abstract data types can play a significant 
************************
s can play a significant role
in the development of software that is reliable, 
efficient, and flexible.  this paper presents and discusses
the application of an algebraic technique 
for the specification of abstract data types.  among
the examples 
************************
s.  among
the examples presented is a top-down development 
of a symbol table for a block structured language; a discussion
of the proof of its correctness is given. 
 the paper also contains a brief discussion of the problems
involved in constructing algebraic specifications 
that are both consistent and complete.

cacm june, 1977

guttag, j.

abstract data type, correctness proof, 
************************
, correctness proof, data type,
data structure, specification, 
************************

************************
Document:  CACM-0253.html
************************
************************
Document:  CACM-2406.html
************************


a data definition and mapping language

a data definition language i sa declarative
computer language for specifying data structures. 
 most data definition languages concentrate on the declaration

************************
 concentrate on the declaration
of logical data structures with little 
concern for how these structures are physically realized
on a computer system.  however, the need for 
data definition languages which describe both 
************************
 which describe both the logical
and physical aspects of data is increasingly 
apparent.  such languages will be a key systems, as well
as in advanced data management systems and distributed 
data bases.  this paper reviews past work in the data
definition language for describing 
************************
 language for describing both logical 
and physical aspects of data.  applications of these
"generalized" data definition languages are also 
discussed.

************************
 are also 
discussed.

cacm december, 1973

sibley, e. h.
taylor, r. w.

data definition language, data and storage 
************************

************************
Document:  CACM-2950.html
************************


a unifying approach to scheduling

this paper presents a scheme for classifying
scheduling algorithms based on an abstract model 
of a scheduling system which formalizes the notion of
priority.  various classes of scheduling algorithms
are defined and related to existing algorithms.  a
criterion for the implementation efficiency of an 
algorithm is developed and results in the definition
of time-invariant algorithms, 
************************

************************
Document:  CACM-2141.html
************************
************************
Document:  CACM-1485.html
************************


the structure of programming languages

in this paper the major components of every
programming language are identified as: (1) the 
elementary program statement, (2) mechanisms for linking
elementary statements together, (3) the means 
by which a program 
************************
s 
by which a program can obtain data inputs.  several
alternative forms of each of these components are 
also described, compared and evaluated.  many examples,
frequently from list processing languages, illustrate 
the forms 
************************
, illustrate 
the forms described.  the advantages, disadvantages and
factors influencing the choice of a form of component 
for a language are discussed, and the paper concludes
with the suggestion that programming languages 
evolve toward one which will permit all the most convenient
ways of structuring programs, organizing 
systems and referencing data.

cacm february, 1966

************************

************************
Document:  CACM-0696.html
************************
************************
Document:  CACM-2244.html
************************
************************
Document:  CACM-1911.html
************************


on coordination reduction and sentence analysis

a class of coordination phenomena in natural
languages is considered within the frame work 
of transformational theory.  to account for these phenomena
it is proposed that certain machinery be 
added to the syntactic component of a transformational
grammar. this machinery includes certain rule 
schemata, the conditions under which they are to be
applied, and conditions determining the sequence 
of subtrees on which they are to be performed.  a solution
to the syntactic analysis problem for this 
class of grammars is outlined.  precise specification
of both the generative procedure of this paper 
and its inverse is given in the form of lisp function definitions.

cacm april, 1969


************************

************************
Document:  CACM-2957.html
************************


database abstractions: aggregation

aggregation is in troduced as an abstraction
which is important in conceptualizing the real 
world.  aggregation transforms a relationship between
objects into a higher-level object.  a new data 
type, called aggregation, is developed which, under
certain criteria of "well-definedness," specifies 
aggregation abstractions.  relational databases defined
as collections of aggregates are structured as 
a hierarchy on n-ary relations.  to main tain well-definedness,
update operations on such databases must 
preserve two invariants.  well-defined relations are
distinct from relations in third normal form.  it 
is shown that these notions are complementary and both are
important in database design.  a top-down 
methodology for database design is described which separates
decisions concerning aggregate structure 
from decisions concerning key identification.  it is
suggested that aggregate types, and other types 
which support real-world abstractions without in troducing
implementation detail, should be incorporated 
into programming languages.

cacm june, 1977

smith, j. m.
smith, d. c. p.

data abstraction, relational database, data type,
aggregation, database design, data structure, 
knowledge representation, data definition language

3.65 3.69 
************************

************************
Document:  CACM-0651.html
************************
************************
Document:  CACM-1703.html
************************


accommodating standards and identification of programming languages

the user public wants standardization and

************************
s standardization and
reliable identification of programming languages 
and related services.  one way of achieving these goals
illustrated by the methods adopted for trac t-64 
interactive language, and its related family of languages.
 oppressive rigidity usually associated with 
standardization is avoided by a new accommodation technique
accessible to the user to allow local variations 
with 
************************

************************
Document:  CACM-2078.html
************************


representations for space planning

problems involving the arrangement of objects in two- 
or three-space where the objective function primarily consists
of derivatives of the distance between objects or their arrangement
are called space planning problems.  the representational
requirements for this problem area are defined and compared with current
computer graphic languages.  four alternative data structures
that allow automated space planning 
************************

************************
Document:  CACM-0920.html
************************
************************
Document:  CACM-0867.html
************************


least squares fitting of planes to surfaces using dynamic programming

dynamic programming has recently been used
by stone, by bellman and by gluss to determine the 
closet fit of broken line segments to a curve in an
interval under the constraint that the number of 
segments is fixed.  in the present paper successive
models are developed to extend the method to the 
fitting of broken plane segments to surfaces z=g(x,y) defined
over certain types of subareas of the 
************************
s of subareas of the (x,y)-space. 
 the first model considers a rectangular area, with
the constraint that the plane segments are defined 
over a grid in the (x,y)-space.  it is then shown how
this model may be incorporated into an algorithm 
that provides successive approximations to optimal fits
for any type of closed area.  finally, 
************************

************************
Document:  CACM-1002.html
************************


a rapid method for digital filtering

since much of the computer time spent in time-series
analysis is used for multiplications, 
a minimum multiplication method was devised for digital
filtering, with the expectation that it would 
be useful in the on line, real-time analysis of biological
data.  the filters are constructed from a succession 
of readily analyzable components in a manner that facilitates
cascading.  the repertoire of frequency 
response curves includes relatively good low-pass and
band-pass designs.  programs are available for 
implementing both the synthesis of these filters, and
their application on computers whose assemblers 
allow the definition of recursive macros.

************************

************************
Document:  CACM-3167.html
************************


updating mean and variance estimates: an improved method

a method of improved efficiency
is given for updating the mean and variance of weighted sampled data
when an additional data 
************************

when an additional data value is included in the set.  evidence
is presented that the method is stable and at least
as accurate as the best existing updating method. 

cacm september, 1979

west, d.

mean, standard deviation, 
************************

************************
Document:  CACM-1403.html
************************
************************
Document:  CACM-2799.html
************************


stably updating mean and standard deviation of data

by considering the 
************************


by considering the (sample) mean of a set of
data as a fit to this data 
************************
 as a fit to this data by a constant function, 
a computational method is given based on a matrix formulation
and givens transformations. the (sample) 
mean and standard deviation 
************************
 and standard deviation can be updated as data
accumulates.  the procedure is numerically stable 
and does not require storage of the data.  methods for
dealing with weighted data and data removal are 
presented.  when updating the mean and square of the
standard 
************************
 and square of the
standard deviation, the process requires no square 
roots.

cacm january, 1975

hanson, r. j.

mean, standard deviation, least squares, givens
transformation, updating estimates, removing data

5.5 5.19

ca750112 
************************

************************
Document:  CACM-2713.html
************************


remark on stably updating mean and
standard deviation of data (corrigendum)

cacm 
************************

************************
Document:  CACM-2425.html
************************
************************
Document:  CACM-2295.html
************************


comment on the composition of semantics in algol 68

cacm august, 1972

van der poel, w. l.

programming primitives, programming languages,
algol, semantics, recursive composition, design 
of programming languages, data structures

1.3 4.2 
************************

************************
Document:  CACM-2180.html
************************
************************
Document:  CACM-2735.html
************************


discrimination in the employment of women in the computer industry

cacm july, 1975

weber, r. e.
gilchrist, b.

discrimination against women, salaries, employment,
programmers, systems analysis, keypunch operators, 
machine operators

************************

************************
Document:  CACM-1678.html
************************


automata, formal languages, abstract switching,
and computability 
************************
 switching,
and computability in a ph. computer science 
program

a number of courses are listed in the area
describe as automata, formal languages, abstract 
switching, and computability, 
************************

************************
Document:  CACM-1923.html
************************
************************
Document:  CACM-2242.html
************************
************************
Document:  CACM-0628.html
************************
************************
Document:  CACM-1282.html
************************


the use of fortran in subroutines with cobol main programs

by using the proper cobol coding techniques and
accounting for differences in storage allocation 
and library routines between the two languages, it is
possible to write fortran iv subroutines that may 
be called from cobol main programs.  such a technique
enables the programmer to take advantage of 
************************

************************
Document:  CACM-2785.html
************************


glypnir-a programming language for illiac iv

glypnir is one of the earliest existing languages
designed for programming the illiac iv computer. 
the syntax of the language is based on algol 60, but has
been extended to allow the programmer explicitly 
to specify 
************************

************************
Document:  CACM-2898.html
************************


a conceptual framework for a nonprocedural programming language

a sequential programming language forces the
programmer to prescribe explicitly the order in 
which the operations in his program have to be executed,
even if the order is not relevant to the solution 
of his problem.  the requirement to indicate irrelevant
sequencing can be removed if the language provides 
facilities for specifying a task in a nonprocedural
manner.  in general, a program specified in this 
way will allow concurrent evaluation.  this paper describes
a conceptual framework for a high level programming 
language providing both nonprocedural and sequential
facilities.  within a program, nonprocedural and 
sequential program modules may be nested freely.

cacm december, 1977

kessels, j. l. w.

parallel programming, descriptive programming,
nonprocedural programming, definitional language, 
data flow programming, applicative 
************************

************************
Document:  CACM-2198.html
************************


introduction to "feature analysis of
generalized data base management systems"

this paper is a separately published introduction
to a main report which analyzes the features 
of generalized data base management systems.  this introduction
gives a review of the current state of 
the art in these systems and discusses the differences
and similarities between capabilities found in 
host language systems and those found in self-contained
systems.  after some discussion of the problems 
of data independence and binding,the four user levels
are identified and described.  technical problems 
facing future designers are described.  the first of
these is that of handling existing stored data and 
the next is that of providing more complex data structures
than those already available in conventional 
programming languages.  the problem of high 
************************
.  the problem of high level interrogation
and update functions acting on network 
structures is mentioned, followed by a discussion of the
problem of catering to a high volume of transactions 
initiated from terminals by parametric users-the lowest
level of user.  the use of cobol as a basis for 
further development work is considered at some length
with respect to data structures, host language 
capabilities, and self-contained capabilities.  this
section also assesses the effect of the data base 
task group proposals.  the final section outlines the
ten major topics in the main body of the full report.

cacm may, 1971

codasyl systems committee

data base management systems, programming languages,
data structures, storage 
************************

************************
Document:  CACM-3103.html
************************


automatic data structure selection: an example and overview

the use of several levels of abstraction has
proved to be very helpful in constructing and 
maintaining programs.  when programs are designed with abstract
data types such as sets and lists, 
************************
 such as sets and lists, programmer 
time can be saved by automating the process of filling
in low-level implementation details.  in the past, 
programming systems have provided only a single general
purpose implementation for an abstract type. 
 thus the programs 
************************
. 
 thus the programs produced using abstract types were
then inefficient 
************************
s were
then inefficient in space or time.  in this paper 
a system for automatically choosing efficient implementations
for abstract types from a library of implementations 
************************
s from a library of implementations 
is discussed.  this process is discussed in detail for
an example program.  general issues in data structure 
selection are also reviewed. 

cacm may, 1978

low, j.

abstract data types, automatic programming, 
************************

************************
Document:  CACM-2705.html
************************


programming languages, natural languages, and mathematics

some social aspects of programming are illuminated
through analogies with similar aspects of 
mathematics and natural languages.  the split between
pure and applied mathematics is found similarly 
in programming. the development of natural languages toward
flexion less, word-order based language types 
speaks for programming 
************************
 
speaks for programming language design based on general,
abstract constructs.  by analogy with incidents 
of the history of artificial, auxiliary languages it
is suggested that 
************************

************************
Document:  CACM-0972.html
************************


an executive system implemented as a finite-state automaton

the 473l command and control system used by
the air force permits many operators to access 
large data files through the use 
************************
 files through the use of a computer.  the man-machine
interface is satisfied by several communication 
consoles from which operators may enter queries and
view replies.  a data link permits remote 
************************
 link permits remote stations 
to send messages, status reports and inventories directly
to the computer.  the information received 
over the on-line data link is used to update the data files
which are stored on disk.  the 473l programming 
system is divided into an executive control program and
five components with different processing priorities. 
 these priorities permit the system to be most sensitive
to the console inputs and permit the operators 
at all the consoles 
************************

************************
Document:  CACM-2470.html
************************


fen-an axiomatic basis for program semantics

a formal system is presented which abstracts
the notions of data item, function, and relation. 
 it is argued that the system is more suitable than set
theory (or its derivatives) for the concise and 
accurate description of program semantics.  it is shown
how the system can be used to build composite 
data types out of simper ones with 
************************
 out of simper ones with the operations of rowing,
structuring, and uniting.  it is also demonstrated 
that completely new primitive types can be introduced
into 
************************
 can be introduced
into languages through the mechanism of singleton 
data types.  both deterministic 
************************
s.  both deterministic and nondeterministic
functions are shown to be definable in the system. 
 it is described how the local environment can be modeled
as a data item and how imperative statements 
can be considered functions on the environment.  the
nature of recursive functions is briefly discussed, 
and a technique is presented by which they can be introduced
into the system.  the technique is contrasted 
with the use of the paradoxical combinator, y.  the
questions of local and global environments and of 
various modes of function calling and parameter passing
are touched upon. the theory is applied to the 
proof of several elementary theorems concerning the semantics
of the assignment, conditional, and iterative 
statements.  an appendix is included which presents in
detail the formal system governing webs and fen, 
the abstractions used informally in the body of the paper.

cacm august, 1973

maclennan, b. j.

semantics, formal systems, lambda-calculus, extensible
languages, data types, modes, axioms, correctness, 
************************
s, modes, axioms, correctness, 
formal language definition, formal description, data structures,
description languages, models of computation

************************

************************
Document:  CACM-0618.html
************************


computers- the key to total systems control: an industrial viewpoint

man-man-machine processes are characterized in five
main types, and the markets for 
************************

************************
Document:  CACM-1206.html
************************


the self-judgment method of curve fitting

a computer-oriented method for processing and
communicating numerical data is described.  the 
instrument reliability factors (irf), which exactly
define the limits of reliability of each measured 
item of information, are used to compute the maximum
permitted error (mpe) associated with each values 
of each ordinate.  the self-judgment principle (sjp)
is used to discard wrong information and to compute 
mean values of the parameters and their mpe's in terms
of the irf.  data compatibility tests with any 
number 
************************

************************
Document:  CACM-2084.html
************************


a note on the complement of inherently ambiguous context-free languages

cacm march, 1970

maurer, h. a.

ambiguity, inherent ambiguity, complement, context-free language,
chomsky-language, phrase structure language, production system,
type 2 language, bounded 
************************

************************
Document:  CACM-1459.html
************************
************************
Document:  CACM-0527.html
************************


the description list of concepts

a concept is defined as a class of objects
whose members can be distinguished by processing 
its properties.  property is defined to mean a partition
of the set of all objects into disjoint classes. 
 the formal definition of a concept is recursive 
************************

************************
Document:  CACM-2717.html
************************


convert: a high level translation
definition language for data conversion

this paper 
************************
 conversion

this paper describes a high level and nonprocedural
translation definition language, convert, 
which provides very powerful and highly flexible data
restructuring capabilities. its design is based 
on the simple underlying concept of a form which enables
the users to visualize the translation processes, 
and thus makes data translation a much simpler task. 
"convert" has been chosen for conveying the purpose 
of the language and should not be confused with any
other language or program bearing the same name.

cacm october, 1975

shu, n. c.
housel, b. c.
lum, v. y.

data conversion, data restructuring, data translation,
database reorganization, translation definition, 
utility program, programming languages, nonprocedural languages

************************

************************
Document:  CACM-1937.html
************************


codas: a data display system

codas, a customer oriented data system, is
a user-oriented data retrieval and display system. 
 the command language of the system provides the user
with an easy means for specifying data retrieval 
and display requests.  data is displayed as tables and
graphs produced in a format ready for publication. 
 in this paper the statements of the request language
and the general system design are described.

cacm february, 1969

day, r. h.
mansfield, m. k.
ellis, m. e.

data display, information retrieval, graphic display,
command languages, report program generation, 
************************

************************
Document:  CACM-2305.html
************************
************************
Document:  CACM-2241.html
************************
************************
Document:  CACM-1902.html
************************


an automatic grading scheme for simple programming exercises

a discussion is given of alterations that were
made to a typical university operating system 
to record the results of programming exercises in three
different languages, including assembly language. 
 in this computer-controlled grading scheme provision
is made for testing with programmer-supplied data 
and for final runs 
************************
 
and for final runs with system-supplied data.  exercises
run under 
************************

************************
Document:  CACM-1470.html
************************


the structure of programming languages

the following are identified as major components
of every programming language: (1) the elementary 
program statement, (2) mechanisms for linking elementary
statements together, (3) the means by which 
a program 
************************
s by which 
a program can obtain data inputs.  several alternative
forms of each of these components are described, 
compared and evaluated.  many examples, frequently from
list processing languages, illustrate the forms 
************************
, illustrate the forms 
described.  elementary program statements usually take
the form of commands, requirements, or implicit 
specifications.  a command is an imperative statement
that commands the action to be taken.  a requirement 
describes the effect to be achieved without saying anything
about the actions to be taken.  an implicit 
specification is similar to a requirement, but the programmer
must understand what actions will be taken 
to achieve the desired effect.  subroutines may be entered
explicitly, by execute call, or by function 
composition.  explicitly called subroutines generally
require special linkage conventions.  an execute 
subroutine call is syntactically indistinguishable from
a basic instruction of the programming language. 
 function composition is a convenient alternative to
the explicit call.  the three principal ways of 
getting inputs for routines are (1) by referring to
the data itself, (2) by referring to the data by 
a "name", and (3) by referring to it implicitly by means
of variables or functions. 
************************
s
of variables or functions.  names are useful 
entry points into permanent data structures, but can
be error-causing distractions in other contexts. 
the author discusses advantages, disadvantages, and factors
influencing the choice of a form of component 
for a language.   he concludes by suggesting the evolution
of programming languages toward one which 
will 
************************

************************
Document:  CACM-3105.html
************************


a language extension for expressing constraints on data access

controlled sharing of information is needed and
desirable for many applications and is supported 
in operating systems by access control mechanisms.  this
paper shows how to extend programming languages 
to provide controlled sharing.  the extension permits
expression of access constraints on shared data. 
 access constraints can apply both to simple objects, and
to objects that are components of larger objects, 
such as bank account records in a bank's data base.
 the constraints are stated declaratively, and can 
be enforced by static checking similar to type checking.
 the approach can be used to extend any strongly-typed 
language, but is particularly suitable for extending
languages that support the notion of abstract data 
types. 

cacm may, 1978

jones, 
************************
. 

cacm may, 1978

jones, a.
liskov,b.

programming languages, access control, data types,
abstract data types, 
************************
s,
abstract data types, type checking, capabilities

************************

************************
Document:  CACM-0602.html
************************
************************
Document:  CACM-3171.html
************************


line numbers made cheap

a technique is described for run-time line number administration
to be used for implementations of high level languages.  under suitable
circumstances, this method requires absolutely no overhead,
in either time or space, during execution of the program. 

cacm october, 1979

klint, p.

line number administration, diagnostic messages, abstract machine code 

4.12 
************************

************************
Document:  CACM-0890.html
************************


selected definitions 

a selection of the 
************************
 

a selection of the definitions prepared by the
acm 
************************

************************
Document:  CACM-1262.html
************************


procedure-oriented language statements to facilitate parallel processing

two statements are suggested which allow a programmer
writing in a procedure-oriented 
************************

************************
Document:  CACM-0230.html
************************
